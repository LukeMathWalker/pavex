name: Build and store docs artifact

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_clis:
    name: "Build CLIs ${{ matrix.target }} (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set BINARY_EXTENSION
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          echo "BINARY_EXTENSION=" >> $GITHUB_ENV
      - name: Set BINARY_EXTENSION
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          Add-Content $env:GITHUB_ENV "BINARY_EXTENSION=.exe" -Encoding utf8
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.6.0
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./libs -> ./target"
          key: "build-pavex-cli"
      - name: Build CLI
        run: |
          cd libs
          cargo build --bin pavex --bin pavexc --release
      - name: Store pavex CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pavex_cli-${{ matrix.target }}
          path: libs/target/release/pavex${{ env.BINARY_EXTENSION }}
      - name: Store pavexc CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pavexc_cli-${{ matrix.target }}
          path: libs/target/release/pavexc${{ env.BINARY_EXTENSION }}

  build_tutorial_generator:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.6.0
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./doc_examples/tutorial_generator -> ./target"
      - name: Build CLI
        run: |
          cd doc_examples/tutorial_generator
          cargo build
      - name: Store CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: tutorial_generator
          path: doc_examples/tutorial_generator/target/debug/tutorial_generator

  tests:
    name: "Run tests ${{ matrix.target }} (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    needs:
      - build_clis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set BINARY_EXTENSION
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          echo "BINARY_EXTENSION=" >> $GITHUB_ENV
      - name: Set BINARY_EXTENSION
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          Add-Content $env:GITHUB_ENV "BINARY_EXTENSION=.exe" -Encoding utf8
      - name: Set PAVEX
        if: ${{ matrix.os == 'macos-12' }}
        run: |
          echo "PAVEX=/Users/runner/.cargo/bin/pavex${BINARY_EXTENSION}" >> $GITHUB_ENV
          echo "PAVEXC=/Users/runner/.cargo/bin/pavexc${BINARY_EXTENSION}" >> $GITHUB_ENV
      - name: Set PAVEX
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          echo "PAVEX=/home/runner/.cargo/bin/pavex${BINARY_EXTENSION}" >> $GITHUB_ENV
          echo "PAVEXC=/home/runner/.cargo/bin/pavexc${BINARY_EXTENSION}" >> $GITHUB_ENV
      - name: Set PAVEX
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          Add-Content $env:GITHUB_ENV "PAVEX=C:\Users\runneradmin\.cargo\bin\pavex${BINARY_EXTENSION}" -Encoding utf8
          Add-Content $env:GITHUB_ENV "PAVEXC=C:\Users\runneradmin\.cargo\bin\pavexc${BINARY_EXTENSION}" -Encoding utf8
      - name: Install Rust nightly toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-docs-json, rustfmt
          rustflags: ""
      - name: Install Rust stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.6.0
        with:
          components: rustfmt
          rustflags: ""
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./libs -> ./target"
          key: "tests"
      - name: Download pavex CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pavex_cli-${{ matrix.target }}
          path: ~/.cargo/bin
      - name: Download pavexc CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pavexc_cli-${{ matrix.target }}
          path: ~/.cargo/bin
      - name: Mark pavex as executable
        if: ${{ matrix.os != 'windows-2022' }}
        run: chmod +x ${{ env.PAVEX }}
      - name: Mark pavexc as executable
        if: ${{ matrix.os != 'windows-2022' }}
        run: chmod +x ${{ env.PAVEXC }}
      - name: Run tests
        working-directory: libs
        run: |
          cargo test --no-run
          cargo test --workspace --exclude="pavex_cli"
      - name: Run UI tests
        env:
          PAVEX_TEST_CLI_PATH: ${{ env.PAVEX }}
          PAVEX_PAVEXC: ${{ env.PAVEXC }}
        working-directory: libs
        run: |
          cargo test --package pavex_cli

  is_up_to_date:
    runs-on: ubuntu-latest
    env:
      PAVEX_PAVEXC: "/home/runner/.cargo/bin/pavexc"
    needs:
      - build_clis
      - build_tutorial_generator
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "ci@pavex.dev"
      - name: Install Rust nightly toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-docs-json, rustfmt
          rustflags: ""
      - name: Install Rust stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.6.0
        with:
          rustflags: ""
          components: rustfmt
      - name: Download pavex CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pavex_cli-x86_64-unknown-linux-gnu
          path: ~/.cargo/bin
      - name: Download pavexc CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pavexc_cli-x86_64-unknown-linux-gnu
          path: ~/.cargo/bin
      - name: Mark pavex as executable
        run: chmod +x ~/.cargo/bin/pavex
      - name: Mark pavexc as executable
        run: chmod +x ~/.cargo/bin/pavexc
      - name: Download tutorial_generator CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: tutorial_generator
          path: ~/.cargo/bin
      - name: Mark as executable
        run: chmod +x ~/.cargo/bin/tutorial_generator
      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-px
        run: cargo binstall -y --github-token=${{ secrets.GITHUB_TOKEN }} cargo-px@0.1
      - name: Install exa
        run: cargo binstall -y --github-token=${{ secrets.GITHUB_TOKEN }} exa@0.10
      - name: Verify tutorials
        run: |
          cd doc_examples
          RUST_BACKTRACE=0 tutorial_generator --verify

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1.6.0
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./libs -> ./target"
          key: "build-pavex-docs"
      - name: Build API reference
        run: |
          cd libs
          cargo doc --package pavex --package pavex_cli_client --no-deps
      - name: Copy API reference files
        run: |
          mkdir -p docs/api_reference
          cp -r libs/target/doc/* docs/api_reference
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: docs/
          load: true
          tags: pavex-docs
      - name: Build docs
        run: |
          docker run --rm -v ${PWD}:/docs pavex-docs build
      - uses: actions/upload-artifact@v4
        with:
          name: docs
          path: site/
      - name: Fix base
        run: |
          # Convert all "absolute" guide links in the reference to relative links so that we can scan for dead links
          sudo find . -type f -exec sed -i "s#https://pavex.dev/docs/#file:///${PWD}/site/#g" {} +
          sudo find . -type f -exec sed -i "s#https://pavex.dev/#file:///${PWD}/site/#g" {} +
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1
        with:
          fail: true
          args: |
            --base site 
            --exclude-loopback 
            --exclude-path="site/api_reference/pavex/http" 
            --exclude-path="site/api_reference/help.html" 
            --exclude-path="site/api_reference/settings.html" 
            --exclude="https://doc.rust-lang.org/*" 
            --exclude="https://docs.rs/**/*" 
            --exclude-path="site/api_reference/static.files" 
            --exclude="https://fonts.gstatic.com" 
            --require-https 
            --verbose 
            --no-progress 
            site
