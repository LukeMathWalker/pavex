//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: pavex_matchit::Router<u32>,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    s0: sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
    s1: jsonwebtoken::EncodingKey,
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {
    #[error(transparent)]
    EncodingKey(jsonwebtoken::errors::Error),
    #[error(transparent)]
    GetPool(sqlx_core::Error),
}
pub async fn build_application_state(
    v0: &app::configuration::ApplicationConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    let v1 = app::configuration::ApplicationConfig::auth_config(v0);
    let v2 = app::configuration::AuthConfig::encoding_key(v1);
    let v3 = match v2 {
        Ok(ok) => ok,
        Err(v3) => {
            return {
                let v4 = crate::ApplicationStateError::EncodingKey(v3);
                core::result::Result::Err(v4)
            };
        }
    };
    let v4 = app::configuration::ApplicationConfig::database_config(v0);
    let v5 = app::configuration::DatabaseConfig::get_pool(v4).await;
    let v6 = match v5 {
        Ok(ok) => ok,
        Err(v6) => {
            return {
                let v7 = crate::ApplicationStateError::GetPool(v6);
                core::result::Result::Err(v7)
            };
        }
    };
    let v7 = crate::ApplicationState {
        s0: v6,
        s1: v3,
    };
    core::result::Result::Ok(v7)
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    let server_state = std::sync::Arc::new(ServerState {
        router: build_router(),
        application_state,
    });
    server_builder.serve(route_request, server_state)
}
fn build_router() -> pavex_matchit::Router<u32> {
    let mut router = pavex_matchit::Router::new();
    router.insert("/api/ping", 0u32).unwrap();
    router.insert("/articles", 1u32).unwrap();
    router.insert("/articles/:slug", 2u32).unwrap();
    router.insert("/articles/:slug/comments", 3u32).unwrap();
    router.insert("/articles/:slug/comments/:comment_id", 4u32).unwrap();
    router.insert("/articles/:slug/favorite", 5u32).unwrap();
    router.insert("/articles/feed", 6u32).unwrap();
    router.insert("/profiles/:username", 7u32).unwrap();
    router.insert("/profiles/:username/follow", 8u32).unwrap();
    router.insert("/tags", 9u32).unwrap();
    router.insert("/user", 10u32).unwrap();
    router.insert("/users", 11u32).unwrap();
    router.insert("/users/login", 12u32).unwrap();
    router
}
async fn route_request(
    request: http::Request<hyper::body::Incoming>,
    server_state: std::sync::Arc<ServerState>,
) -> pavex::response::Response {
    let (request_head, request_body) = request.into_parts();
    #[allow(unused)]
    let request_body = pavex::request::body::RawIncomingBody::from(request_body);
    let request_head: pavex::request::RequestHead = request_head.into();
    let matched_route = match server_state.router.at(&request_head.target.path()) {
        Ok(m) => m,
        Err(_) => {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_2::middleware_0(
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        }
    };
    let route_id = matched_route.value;
    #[allow(unused)]
    let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
        .params
        .into();
    match route_id {
        0u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/api/ping",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_0::middleware_0(matched_route_template, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        1u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_10::middleware_0(matched_route_template, &request_head).await
                }
                &pavex::http::Method::POST => {
                    route_11::middleware_0(
                            request_body,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        2u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles/:slug",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_13::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                &pavex::http::Method::DELETE => {
                    route_14::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                &pavex::http::Method::PUT => {
                    route_15::middleware_0(
                            request_body,
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                            pavex::http::Method::DELETE,
                            pavex::http::Method::PUT,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        3u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles/:slug/comments",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_18::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                &pavex::http::Method::POST => {
                    route_19::middleware_0(
                            request_body,
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        4u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles/:slug/comments/:comment_id",
            );
            match &request_head.method {
                &pavex::http::Method::DELETE => {
                    route_20::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::DELETE,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        5u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles/:slug/favorite",
            );
            match &request_head.method {
                &pavex::http::Method::DELETE => {
                    route_16::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                &pavex::http::Method::POST => {
                    route_17::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::DELETE,
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        6u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/articles/feed",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_12::middleware_0(matched_route_template, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        7u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/profiles/:username",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_7::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        8u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/profiles/:username/follow",
            );
            match &request_head.method {
                &pavex::http::Method::POST => {
                    route_8::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                &pavex::http::Method::DELETE => {
                    route_9::middleware_0(
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::POST,
                            pavex::http::Method::DELETE,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        9u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/tags",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_1::middleware_0(matched_route_template, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        10u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/user",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_5::middleware_0(matched_route_template, &request_head).await
                }
                &pavex::http::Method::PUT => {
                    route_6::middleware_0(
                            request_body,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                            pavex::http::Method::PUT,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        11u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/users",
            );
            match &request_head.method {
                &pavex::http::Method::POST => {
                    route_3::middleware_0(
                            &server_state.application_state.s1,
                            &server_state.application_state.s0,
                            request_body,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        12u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/users/login",
            );
            match &request_head.method {
                &pavex::http::Method::POST => {
                    route_4::middleware_0(
                            &server_state.application_state.s1,
                            &server_state.application_state.s0,
                            request_body,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::POST,
                        ])
                        .into();
                    route_2::middleware_0(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        i => unreachable!("Unknown route id: {}", i),
    }
}
pub mod route_0 {
    pub async fn middleware_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_0::Next0 {
            s_0: &v3,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn middleware_1(
        v0: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v1 = crate::route_0::Next1 {
            next: handler,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::telemetry::response_logger(v2, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    pub async fn handler() -> pavex::response::Response {
        let v0 = app::routes::status::ping();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    pub struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    pub struct Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        next: fn() -> T,
    }
    impl<T> std::future::IntoFuture for Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)()
        }
    }
}
pub mod route_1 {
    pub async fn middleware_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_1::Next0 {
            s_0: &v3,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn middleware_1(
        v0: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v1 = crate::route_1::Next1 {
            next: handler,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::telemetry::response_logger(v2, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    pub async fn handler() -> pavex::response::Response {
        let v0 = app::routes::tags::get_tags();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    pub struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    pub struct Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        next: fn() -> T,
    }
    impl<T> std::future::IntoFuture for Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)()
        }
    }
}
pub mod route_2 {
    pub async fn middleware_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_2::Next0 {
            s_0: v2,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: &pavex::router::AllowedMethods,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_2::Next1 {
            s_0: v0,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a pavex::router::AllowedMethods, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_3 {
    pub async fn middleware_0(
        v0: &'_ jsonwebtoken::EncodingKey,
        v1: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        v2: pavex::request::body::RawIncomingBody,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = pavex::telemetry::ServerRequestId::generate();
        let v6 = app::telemetry::root_span(v4, v3, v5);
        let v7 = crate::route_3::Next0 {
            s_0: v0,
            s_1: v4,
            s_2: &v6,
            s_3: v2,
            s_4: v1,
            next: middleware_1,
        };
        let v8 = pavex::middleware::Next::new(v7);
        let v9 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v6);
        let v10 = pavex_tracing::logger(v9, v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: &'_ jsonwebtoken::EncodingKey,
        v2: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        v3: pavex::request::body::RawIncomingBody,
        v4: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v5 = crate::route_3::Next1 {
            s_0: v1,
            s_1: v0,
            s_2: v4,
            s_3: v3,
            s_4: v2,
            next: handler,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = app::telemetry::response_logger(v6, v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn handler(
        v0: &jsonwebtoken::EncodingKey,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::request::body::RawIncomingBody,
        v4: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
    ) -> pavex::response::Response {
        let v5 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v6 = pavex::request::body::BufferedBody::extract(v1, v3, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v1, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v10,
                    )
                };
            }
        };
        let v10 = app::routes::users::signup(v9, v4, v0).await;
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = app::routes::users::SignupError::into_response(&v11);
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v12,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    pub struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a jsonwebtoken::EncodingKey,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c pavex_tracing::RootSpan,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        next: fn(
            &'b pavex::request::RequestHead,
            &'a jsonwebtoken::EncodingKey,
            &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
            pavex::request::body::RawIncomingBody,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0, self.s_4, self.s_3, self.s_2)
        }
    }
    pub struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a jsonwebtoken::EncodingKey,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c pavex_tracing::RootSpan,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        next: fn(
            &'a jsonwebtoken::EncodingKey,
            &'b pavex::request::RequestHead,
            &'c pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
pub mod route_4 {
    pub async fn middleware_0(
        v0: &'_ jsonwebtoken::EncodingKey,
        v1: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        v2: pavex::request::body::RawIncomingBody,
        v3: pavex::request::path::MatchedPathPattern,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = pavex::telemetry::ServerRequestId::generate();
        let v6 = app::telemetry::root_span(v4, v3, v5);
        let v7 = crate::route_4::Next0 {
            s_0: v0,
            s_1: v4,
            s_2: &v6,
            s_3: v2,
            s_4: v1,
            next: middleware_1,
        };
        let v8 = pavex::middleware::Next::new(v7);
        let v9 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v6);
        let v10 = pavex_tracing::logger(v9, v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: &'_ jsonwebtoken::EncodingKey,
        v2: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        v3: pavex::request::body::RawIncomingBody,
        v4: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v5 = crate::route_4::Next1 {
            s_0: v1,
            s_1: v0,
            s_2: v4,
            s_3: v3,
            s_4: v2,
            next: handler,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = app::telemetry::response_logger(v6, v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn handler(
        v0: &jsonwebtoken::EncodingKey,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::request::body::RawIncomingBody,
        v4: &sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
    ) -> pavex::response::Response {
        let v5 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v6 = pavex::request::body::BufferedBody::extract(v1, v3, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v1, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v10,
                    )
                };
            }
        };
        let v10 = app::routes::users::login(v9, v4, v0).await;
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = app::routes::users::LoginError::into_response(&v11);
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v12,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    pub struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a jsonwebtoken::EncodingKey,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c pavex_tracing::RootSpan,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        next: fn(
            &'b pavex::request::RequestHead,
            &'a jsonwebtoken::EncodingKey,
            &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
            pavex::request::body::RawIncomingBody,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0, self.s_4, self.s_3, self.s_2)
        }
    }
    pub struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a jsonwebtoken::EncodingKey,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c pavex_tracing::RootSpan,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        next: fn(
            &'a jsonwebtoken::EncodingKey,
            &'b pavex::request::RequestHead,
            &'c pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'d sqlx_core::driver_prelude::pool::Pool<sqlx_postgres::Postgres>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
pub mod route_5 {
    pub async fn middleware_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_5::Next0 {
            s_0: &v3,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn middleware_1(
        v0: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v1 = crate::route_5::Next1 {
            next: handler,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::telemetry::response_logger(v2, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    pub async fn handler() -> pavex::response::Response {
        let v0 = app::routes::users::get_user();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    pub struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    pub struct Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        next: fn() -> T,
    }
    impl<T> std::future::IntoFuture for Next1<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)()
        }
    }
}
pub mod route_6 {
    pub async fn middleware_0(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_6::Next0 {
            s_0: &v4,
            s_1: v0,
            s_2: v2,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::body::RawIncomingBody,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = crate::route_6::Next1 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            next: handler,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = app::telemetry::response_logger(v4, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::body::RawIncomingBody,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v4 = pavex::request::body::BufferedBody::extract(v2, v1, v3).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::JsonBody::extract(v2, &v5);
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = app::routes::users::update_user(v7);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v8)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'b pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            &'a pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_2, self.s_1, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_7 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_7::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_7::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::get_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_8 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_8::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_8::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::follow_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_9 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_9::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_9::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::unfollow_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_10 {
    pub async fn middleware_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_10::Next0 {
            s_0: &v3,
            s_1: v1,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_10::Next1 {
            s_0: v1,
            s_1: v0,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::request::query::QueryParams::extract(v1);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::query::errors::ExtractQueryParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::list_articles(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'b pavex::request::RequestHead, &'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::request::RequestHead) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_11 {
    pub async fn middleware_0(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_11::Next0 {
            s_0: &v4,
            s_1: v0,
            s_2: v2,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::body::RawIncomingBody,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = crate::route_11::Next1 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            next: handler,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = app::telemetry::response_logger(v4, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::body::RawIncomingBody,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v4 = pavex::request::body::BufferedBody::extract(v2, v1, v3).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::JsonBody::extract(v2, &v5);
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = app::routes::articles::publish_article(v7);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v8)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'b pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            &'a pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_2, self.s_1, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_12 {
    pub async fn middleware_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_12::Next0 {
            s_0: &v3,
            s_1: v1,
            next: middleware_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_12::Next1 {
            s_0: v1,
            s_1: v0,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::request::query::QueryParams::extract(v1);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::query::errors::ExtractQueryParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::get_feed(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'b pavex::request::RequestHead, &'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_1, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::request::RequestHead) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_13 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_13::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_13::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::get_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_14 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_14::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_14::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::delete_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_15 {
    pub async fn middleware_0(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_15::Next0 {
            s_0: &v5,
            s_1: v0,
            s_2: v1,
            s_3: v3,
            next: middleware_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v4 = crate::route_15::Next1 {
            s_0: v3,
            s_1: v1,
            s_2: v2,
            s_3: v0,
            next: handler,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = app::telemetry::response_logger(v5, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v5 = pavex::request::body::BufferedBody::extract(v3, v1, v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::request::body::JsonBody::extract(v3, &v6);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex::request::path::PathParams::extract(v2);
        let v10 = match v9 {
            Ok(ok) => ok,
            Err(v10) => {
                return {
                    let v11 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v10,
                    );
                    let v12 = pavex::Error::new(v10);
                    app::telemetry::error_logger(&v12, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v11,
                    )
                };
            }
        };
        let v11 = app::routes::articles::update_article(v10, v8);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v11)
    }
    pub struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'b, 'c>,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'d pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'a pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_3, self.s_1, self.s_2, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'b, 'c>,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_16 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_16::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_16::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::unfavorite_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_17 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_17::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_17::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::favorite_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_18 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_18::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_18::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::list_comments(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_19 {
    pub async fn middleware_0(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_19::Next0 {
            s_0: &v5,
            s_1: v0,
            s_2: v1,
            s_3: v3,
            next: middleware_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    pub async fn middleware_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v4 = crate::route_19::Next1 {
            s_0: v3,
            s_1: v1,
            s_2: v2,
            s_3: v0,
            next: handler,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = app::telemetry::response_logger(v5, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    pub async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = <pavex::request::body::BodySizeLimit as std::default::Default>::default();
        let v5 = pavex::request::body::BufferedBody::extract(v3, v1, v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v7,
                    )
                };
            }
        };
        let v7 = pavex::request::body::JsonBody::extract(v3, &v6);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex::request::path::PathParams::extract(v2);
        let v10 = match v9 {
            Ok(ok) => ok,
            Err(v10) => {
                return {
                    let v11 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v10,
                    );
                    let v12 = pavex::Error::new(v10);
                    app::telemetry::error_logger(&v12, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v11,
                    )
                };
            }
        };
        let v11 = app::routes::articles::publish_comment(v10, v8);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v11)
    }
    pub struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'b, 'c>,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'d pavex::request::RequestHead,
            pavex::request::body::RawIncomingBody,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'a pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_3, self.s_1, self.s_2, self.s_0)
        }
    }
    pub struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'b, 'c>,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_20 {
    pub async fn middleware_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_20::Next0 {
            s_0: v0,
            s_1: &v4,
            next: middleware_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    pub async fn middleware_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_20::Next1 {
            s_0: v0,
            s_1: v1,
            next: handler,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    pub async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::delete_comment(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    pub struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    pub struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex_tracing::RootSpan,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
