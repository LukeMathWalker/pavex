//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    pub auth: app::configuration::AuthConfig,
    #[serde(default)]
    pub cookies: biscotti::ProcessorConfig,
    pub database: app::configuration::DatabaseConfig,
    pub server: app::configuration::ServerConfig,
}
pub struct ApplicationState {
    pub encoding_key: jsonwebtoken::EncodingKey,
    pub pool: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
    pub processor: biscotti::Processor,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Self::_new(&app_config.auth, &app_config.database, app_config.cookies).await
    }
    async fn _new(
        v0: &app::configuration::AuthConfig,
        v1: &app::configuration::DatabaseConfig,
        v2: biscotti::ProcessorConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        let v3 = app::configuration::AuthConfig::encoding_key(v0);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = crate::ApplicationStateError::AuthConfigEncodingKey(v4);
                    core::result::Result::Err(v5)
                };
            }
        };
        let v5 = app::configuration::DatabaseConfig::get_pool(v1).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = crate::ApplicationStateError::DatabaseConfigGetPool(v6);
                    core::result::Result::Err(v7)
                };
            }
        };
        let v7 = pavex::cookie::config_into_processor(v2);
        let v8 = crate::ApplicationState {
            encoding_key: v4,
            pool: v6,
            processor: v7,
        };
        core::result::Result::Ok(v8)
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    app_config: crate::ApplicationConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(app_config).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {
    #[error(transparent)]
    AuthConfigEncodingKey(jsonwebtoken::errors::Error),
    #[error(transparent)]
    DatabaseConfigGetPool(sqlx_core::Error),
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/articles", 0u32).unwrap();
        router.insert("/articles/feed", 1u32).unwrap();
        router.insert("/articles/{slug}", 2u32).unwrap();
        router.insert("/articles/{slug}/comments", 3u32).unwrap();
        router.insert("/articles/{slug}/comments/{comment_id}", 4u32).unwrap();
        router.insert("/articles/{slug}/favorite", 5u32).unwrap();
        router.insert("/ping", 6u32).unwrap();
        router.insert("/profiles/{username}", 7u32).unwrap();
        router.insert("/profiles/{username}/follow", 8u32).unwrap();
        router.insert("/tags", 9u32).unwrap();
        router.insert("/user", 10u32).unwrap();
        router.insert("/users", 11u32).unwrap();
        router.insert("/users/login", 12u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, request_body) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let request_body = pavex::request::body::RawIncomingBody::from(request_body);
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_2::entrypoint(
                    matched_route_template,
                    &state.processor,
                    &allowed_methods,
                    &request_head,
                )
                .await;
        };
        let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
            .params
            .into();
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles",
                        );
                        route_15::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles",
                        );
                        route_17::entrypoint(
                                matched_route_template,
                                request_body,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/feed",
                        );
                        route_14::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/feed",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::DELETE => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}",
                        );
                        route_10::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}",
                        );
                        route_13::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::PUT => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}",
                        );
                        route_20::entrypoint(
                                matched_route_template,
                                request_body,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::DELETE,
                                pavex::http::Method::GET,
                                pavex::http::Method::PUT,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            3u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/comments",
                        );
                        route_16::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/comments",
                        );
                        route_18::entrypoint(
                                matched_route_template,
                                request_body,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/comments",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            4u32 => {
                match &request_head.method {
                    &pavex::http::Method::DELETE => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/comments/{comment_id}",
                        );
                        route_11::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::DELETE,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/comments/{comment_id}",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            5u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/favorite",
                        );
                        route_12::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::DELETE => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/favorite",
                        );
                        route_19::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                                pavex::http::Method::DELETE,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/articles/{slug}/favorite",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            6u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/ping",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/ping",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            7u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/profiles/{username}",
                        );
                        route_8::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/profiles/{username}",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            8u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/profiles/{username}/follow",
                        );
                        route_7::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::DELETE => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/profiles/{username}/follow",
                        );
                        route_9::entrypoint(
                                matched_route_template,
                                url_params,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                                pavex::http::Method::DELETE,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/profiles/{username}/follow",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            9u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/tags",
                        );
                        route_1::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/tags",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            10u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/user",
                        );
                        route_3::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    &pavex::http::Method::PUT => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/user",
                        );
                        route_6::entrypoint(
                                matched_route_template,
                                request_body,
                                &state.processor,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                                pavex::http::Method::PUT,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/user",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            11u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/users",
                        );
                        route_5::entrypoint(
                                matched_route_template,
                                request_body,
                                &state.processor,
                                &request_head,
                                &state.pool,
                                &state.encoding_key,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/users",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            12u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/users/login",
                        );
                        route_4::entrypoint(
                                matched_route_template,
                                request_body,
                                &state.processor,
                                &request_head,
                                &state.pool,
                                &state.encoding_key,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/users/login",
                        );
                        route_2::entrypoint(
                                matched_route_template,
                                &state.processor,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_0::Next0 {
            s_0: v1,
            s_1: v0,
            s_2: v2,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_0::Next1 {
            s_0: v2,
            s_1: &v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::status::ping();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a biscotti::Processor, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_1::Next0 {
            s_0: v1,
            s_1: v0,
            s_2: v2,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_1::Next1 {
            s_0: v2,
            s_1: &v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::tags::list_tags();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a biscotti::Processor, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::router::AllowedMethods,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::router::AllowedMethods,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_3, s_0, s_1).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_2).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::router::AllowedMethods,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_2::Next0 {
            s_0: v1,
            s_1: v2,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
        v3: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v0, v4);
        let v6 = crate::route_2::Next1 {
            s_0: v2,
            s_1: &v5,
            s_2: v3,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::router::AllowedMethods,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex::router::AllowedMethods,
            pavex::request::path::MatchedPathPattern,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::router::AllowedMethods,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            &'c pavex::router::AllowedMethods,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_3::Next0 {
            s_0: v1,
            s_1: v0,
            s_2: v2,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_3::Next1 {
            s_0: v2,
            s_1: &v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::users::get_user();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a biscotti::Processor, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
        s_4: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'d jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_4: &'d jsonwebtoken::EncodingKey,
        s_5: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_5, s_2, s_0, s_3, s_4).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        s_4: &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'e jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_3, s_1, s_4, s_5).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
        v4: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v5: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v6 = crate::route_4::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v3,
            s_3: v4,
            s_4: v5,
            s_5: v0,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
        v4: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v5: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v6 = pavex::telemetry::ServerRequestId::generate();
        let v7 = app::telemetry::root_span(v2, v1, v6);
        let v8 = crate::route_4::Next1 {
            s_0: v3,
            s_1: &v7,
            s_2: v0,
            s_3: v2,
            s_4: v4,
            s_5: v5,
            next: stage_2,
        };
        let v9 = pavex::middleware::Next::new(v8);
        let v10 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v7);
        let v11 = pavex_tracing::logger(v10, v9).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v4: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v5 = pavex::request::body::BodySizeLimit::new();
        let v6 = pavex::request::body::BufferedBody::extract(v1, v0, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v1, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v10,
                    )
                };
            }
        };
        let v10 = app::routes::users::login(v9, v3, v4).await;
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = app::routes::users::LoginError::into_response(&v11);
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v12,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_4: &'d jsonwebtoken::EncodingKey,
        s_5: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
            &'d jsonwebtoken::EncodingKey,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        s_4: &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'e jsonwebtoken::EncodingKey,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'c pavex::request::RequestHead,
            &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
            &'e jsonwebtoken::EncodingKey,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
}
pub mod route_5 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
        s_4: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'d jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_4: &'d jsonwebtoken::EncodingKey,
        s_5: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_5, s_2, s_0, s_3, s_4).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        s_4: &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'e jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_3, s_1, s_4, s_5).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
        v4: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v5: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v6 = crate::route_5::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v3,
            s_3: v4,
            s_4: v5,
            s_5: v0,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
        v4: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v5: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v6 = pavex::telemetry::ServerRequestId::generate();
        let v7 = app::telemetry::root_span(v2, v1, v6);
        let v8 = crate::route_5::Next1 {
            s_0: v3,
            s_1: &v7,
            s_2: v0,
            s_3: v2,
            s_4: v4,
            s_5: v5,
            next: stage_2,
        };
        let v9 = pavex::middleware::Next::new(v8);
        let v10 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v7);
        let v11 = pavex_tracing::logger(v10, v9).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: &sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v4: &jsonwebtoken::EncodingKey,
    ) -> pavex::response::Response {
        let v5 = pavex::request::body::BodySizeLimit::new();
        let v6 = pavex::request::body::BufferedBody::extract(v1, v0, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v1, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v10,
                    )
                };
            }
        };
        let v10 = app::routes::users::signup(v9, v3, v4).await;
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = app::routes::users::SignupError::into_response(&v11);
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v12,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_4: &'d jsonwebtoken::EncodingKey,
        s_5: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            &'c sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
            &'d jsonwebtoken::EncodingKey,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        s_4: &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        s_5: &'e jsonwebtoken::EncodingKey,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'c pavex::request::RequestHead,
            &'d sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
            &'e jsonwebtoken::EncodingKey,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
}
pub mod route_6 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_3, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_3, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_6::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v3,
            s_3: v0,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_6::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            s_3: v2,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::request::body::BodySizeLimit::new();
        let v4 = pavex::request::body::BufferedBody::extract(v1, v0, v3).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::JsonBody::extract(v1, &v5);
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = app::routes::users::update_user(v7);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_7 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_7::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_7::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::follow_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_8 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_8::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_8::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::get_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_9 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_9::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_9::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::profiles::unfollow_profile(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_10 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_10::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_10::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::delete_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_11 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_11::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_11::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::delete_comment(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_12 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_12::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_12::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::favorite_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_13 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_13::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_13::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::get_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_14 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_14::Next0 {
            s_0: v1,
            s_1: v2,
            s_2: v0,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_14::Next1 {
            s_0: v2,
            s_1: &v4,
            s_2: v1,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::query::QueryParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::query::errors::ExtractQueryParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::get_feed(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_15 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a biscotti::Processor,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &biscotti::Processor,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_15::Next0 {
            s_0: v1,
            s_1: v2,
            s_2: v0,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_15::Next1 {
            s_0: v2,
            s_1: &v4,
            s_2: v1,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::query::QueryParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::query::errors::ExtractQueryParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::list_articles(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: &'c pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_16 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_16::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_16::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::list_comments(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_17 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_3, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_3, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_17::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v3,
            s_3: v0,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_17::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            s_3: v2,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::request::body::BodySizeLimit::new();
        let v4 = pavex::request::body::BufferedBody::extract(v1, v0, v3).await;
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::JsonBody::extract(v1, &v5);
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        let v8 = app::routes::articles::publish_article(v7);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'c pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_18 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'a, 'b>,
        s_3: &'c biscotti::Processor,
        s_4: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d pavex::request::RequestHead,
        s_4: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_4, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1, s_3, s_4).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &biscotti::Processor,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = crate::route_18::Next0 {
            s_0: v3,
            s_1: v2,
            s_2: v1,
            s_3: v4,
            s_4: v0,
            next: stage_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = pavex::middleware::wrap_noop(v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::telemetry::ServerRequestId::generate();
        let v6 = app::telemetry::root_span(v3, v2, v5);
        let v7 = crate::route_18::Next1 {
            s_0: v4,
            s_1: &v6,
            s_2: v1,
            s_3: v0,
            s_4: v3,
            next: stage_2,
        };
        let v8 = pavex::middleware::Next::new(v7);
        let v9 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v6);
        let v10 = pavex_tracing::logger(v9, v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
        v2: pavex::request::body::RawIncomingBody,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::request::path::PathParams::extract(v0);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::BodySizeLimit::new();
        let v7 = pavex::request::body::BufferedBody::extract(v3, v2, v6).await;
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex::request::body::JsonBody::extract(v3, &v8);
        let v10 = match v9 {
            Ok(ok) => ok,
            Err(v10) => {
                return {
                    let v11 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v10,
                    );
                    let v12 = pavex::Error::new(v10);
                    app::telemetry::error_logger(&v12, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v11,
                    )
                };
            }
        };
        let v11 = app::routes::articles::publish_comment(v5, v10);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d pavex::request::RequestHead,
        s_4: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::body::RawIncomingBody,
            &'d pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
            pavex::request::body::RawIncomingBody,
            &'e pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
pub mod route_19 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_1, s_2, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &biscotti::Processor,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_19::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v2, v1, v4);
        let v6 = crate::route_19::Next1 {
            s_0: v3,
            s_1: &v5,
            s_2: v0,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::routes::articles::unfavorite_article(v3);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::path::MatchedPathPattern,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_20 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: pavex::request::path::RawPathParams<'a, 'b>,
        s_3: &'c biscotti::Processor,
        s_4: &'d pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d pavex::request::RequestHead,
        s_4: pavex::request::path::MatchedPathPattern,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_4, s_3, s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = handler(s_2, s_1, s_3, s_4).await;
        let response = post_processing_0(response, s_1).await;
        let response = post_processing_1(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::body::RawIncomingBody,
        v2: pavex::request::path::RawPathParams<'_, '_>,
        v3: &biscotti::Processor,
        v4: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v5 = crate::route_20::Next0 {
            s_0: v3,
            s_1: v2,
            s_2: v1,
            s_3: v4,
            s_4: v0,
            next: stage_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = pavex::middleware::wrap_noop(v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
        v4: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v5 = pavex::telemetry::ServerRequestId::generate();
        let v6 = app::telemetry::root_span(v3, v2, v5);
        let v7 = crate::route_20::Next1 {
            s_0: v4,
            s_1: &v6,
            s_2: v1,
            s_3: v0,
            s_4: v3,
            next: stage_2,
        };
        let v8 = pavex::middleware::Next::new(v7);
        let v9 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v6);
        let v10 = pavex_tracing::logger(v9, v8).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v10)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
        v2: pavex::request::body::RawIncomingBody,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::request::path::PathParams::extract(v0);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        let v6 = pavex::request::body::BodySizeLimit::new();
        let v7 = pavex::request::body::BufferedBody::extract(v3, v2, v6).await;
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v9,
                    )
                };
            }
        };
        let v9 = pavex::request::body::JsonBody::extract(v3, &v8);
        let v10 = match v9 {
            Ok(ok) => ok,
            Err(v10) => {
                return {
                    let v11 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v10,
                    );
                    let v12 = pavex::Error::new(v10);
                    app::telemetry::error_logger(&v12, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v11,
                    )
                };
            }
        };
        let v11 = app::routes::articles::update_article(v5, v10);
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &biscotti::Processor,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v1);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: pavex::request::body::RawIncomingBody,
        s_3: &'d pavex::request::RequestHead,
        s_4: pavex::request::path::MatchedPathPattern,
        next: fn(
            &'a biscotti::Processor,
            pavex::request::path::RawPathParams<'b, 'c>,
            pavex::request::body::RawIncomingBody,
            &'d pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex_tracing::RootSpan,
        s_2: pavex::request::path::RawPathParams<'c, 'd>,
        s_3: pavex::request::body::RawIncomingBody,
        s_4: &'e pavex::request::RequestHead,
        next: fn(
            &'a biscotti::Processor,
            &'b pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'c, 'd>,
            pavex::request::body::RawIncomingBody,
            &'e pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
