diff --git a/demo/src/blueprint.rs b/demo/src/blueprint.rs
index 44c8a85..e3623cd 100644
--- a/demo/src/blueprint.rs
+++ b/demo/src/blueprint.rs
@@ -1,5 +1,5 @@
+use pavex::blueprint::{Blueprint, constructor::Lifecycle, router::GET};
 use pavex::blueprint::constructor::CloningStrategy;
-use pavex::blueprint::{constructor::Lifecycle, router::GET, Blueprint};
 use pavex::f;
 
 /// The main blueprint, containing all the routes, constructors and error handlers
@@ -8,6 +8,11 @@ pub fn blueprint() -> Blueprint {
     let mut bp = Blueprint::new();
     register_common_constructors(&mut bp);
 
+    bp.constructor(
+        f!(crate::user_agent::UserAgent::extract),
+        Lifecycle::RequestScoped,
+    );
+
     add_telemetry_middleware(&mut bp);
 
     bp.route(GET, "/api/ping", f!(crate::routes::status::ping));
@@ -22,7 +27,7 @@ fn register_common_constructors(bp: &mut Blueprint) {
         f!(pavex::request::query::QueryParams::extract),
         Lifecycle::RequestScoped,
     )
-    .error_handler(f!(
+        .error_handler(f!(
         pavex::request::query::errors::ExtractQueryParamsError::into_response
     ));
 
@@ -31,7 +36,7 @@ fn register_common_constructors(bp: &mut Blueprint) {
         f!(pavex::request::route::RouteParams::extract),
         Lifecycle::RequestScoped,
     )
-    .error_handler(f!(
+        .error_handler(f!(
         pavex::request::route::errors::ExtractRouteParamsError::into_response
     ));
 
@@ -40,14 +45,14 @@ fn register_common_constructors(bp: &mut Blueprint) {
         f!(pavex::request::body::JsonBody::extract),
         Lifecycle::RequestScoped,
     )
-    .error_handler(f!(
+        .error_handler(f!(
         pavex::request::body::errors::ExtractJsonBodyError::into_response
     ));
     bp.constructor(
         f!(pavex::request::body::BufferedBody::extract),
         Lifecycle::RequestScoped,
     )
-    .error_handler(f!(
+        .error_handler(f!(
         pavex::request::body::errors::ExtractBufferedBodyError::into_response
     ));
     bp.constructor(
@@ -62,7 +67,7 @@ fn add_telemetry_middleware(bp: &mut Blueprint) {
         f!(crate::telemetry::RootSpan::new),
         Lifecycle::RequestScoped,
     )
-    .cloning(CloningStrategy::CloneIfNecessary);
+        .cloning(CloningStrategy::CloneIfNecessary);
 
     bp.wrap(f!(crate::telemetry::logger));
 }
diff --git a/demo/src/user_agent.rs b/demo/src/user_agent.rs
index f16d4c1..c9d0771 100644
--- a/demo/src/user_agent.rs
+++ b/demo/src/user_agent.rs
@@ -1,6 +1,22 @@
+use pavex::http::header::USER_AGENT;
+use pavex::request::RequestHead;
+
 pub enum UserAgent {
     /// No `User-Agent` header was provided.
     Unknown,
     /// The value of the `User-Agent` header for the incoming request.
     Known(String),
 }
+
+impl UserAgent {
+    pub fn extract(request_head: &RequestHead) -> Self {
+        let Some(user_agent) = request_head.headers.get(USER_AGENT) else {
+            return Self::Unknown;
+        };
+
+        match user_agent.to_str() {
+            Ok(s) => Self::Known(s.into()),
+            Err(_e) => todo!(),
+        }
+    }
+}
