diff --git a/demo/src/blueprint.rs b/demo/src/blueprint.rs
index dba0308..7f87c0a 100644
--- a/demo/src/blueprint.rs
+++ b/demo/src/blueprint.rs
@@ -10,6 +10,11 @@ pub fn blueprint() -> Blueprint {
     let mut bp = Blueprint::new();
     register_common_constructors(&mut bp);

+    bp.constructor(
+        f!(crate::user_agent::UserAgent::extract),
+        Lifecycle::RequestScoped,
+    );
+
     add_telemetry_middleware(&mut bp);

     bp.route(GET, "/api/ping", f!(crate::routes::status::ping));
diff --git a/demo/src/user_agent.rs b/demo/src/user_agent.rs
index f16d4c1..c9d0771 100644
--- a/demo/src/user_agent.rs
+++ b/demo/src/user_agent.rs
@@ -1,6 +1,22 @@
+use pavex::http::header::USER_AGENT;
+use pavex::request::RequestHead;
+
 pub enum UserAgent {
     /// No `User-Agent` header was provided.
     Unknown,
     /// The value of the `User-Agent` header for the incoming request.
     Known(String),
 }
+
+impl UserAgent {
+    pub fn extract(request_head: &RequestHead) -> Self {
+        let Some(user_agent) = request_head.headers.get(USER_AGENT) else {
+            return Self::Unknown;
+        };
+
+        match user_agent.to_str() {
+            Ok(s) => Self::Known(s.into()),
+            Err(_e) => todo!(),
+        }
+    }
+}
