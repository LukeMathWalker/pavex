diff --git a/app/src/blueprint.rs b/app/src/blueprint.rs
--- a/app/src/blueprint.rs
+++ b/app/src/blueprint.rs
@@ -1,4 +1,5 @@
 use crate::{configuration::ApplicationConfig, telemetry};
+use pavex::blueprint::constructor::Lifecycle;
 use pavex::blueprint::{router::GET, Blueprint};
 use pavex::f;
 use pavex::kit::ApiKit;
@@ -11,6 +12,11 @@ pub fn blueprint() -> Blueprint {
     telemetry::register(&mut bp);
     ApplicationConfig::register(&mut bp);

+    bp.constructor(
+        f!(crate::user_agent::UserAgent::extract),
+        Lifecycle::RequestScoped,
+    );
+
     bp.route(GET, "/api/ping", f!(crate::routes::status::ping));
     bp.route(GET, "/api/greet/:name", f!(crate::routes::greet::greet));
     bp
diff --git a/app/src/user_agent.rs b/app/src/user_agent.rs
--- a/app/src/user_agent.rs
+++ b/app/src/user_agent.rs
@@ -1,6 +1,22 @@
+use pavex::http::header::USER_AGENT;
+use pavex::request::RequestHead;
+
 pub enum UserAgent {
     /// No `User-Agent` header was provided.
     Unknown,
     /// The value of the `User-Agent` header for the incoming request.
     Known(String),
 }
+
+impl UserAgent {
+    pub fn extract(request_head: &RequestHead) -> Self {
+        let Some(user_agent) = request_head.headers.get(USER_AGENT) else {
+            return Self::Unknown;
+        };
+
+        match user_agent.to_str() {
+            Ok(s) => Self::Known(s.into()),
+            Err(_e) => todo!(),
+        }
+    }
+}
