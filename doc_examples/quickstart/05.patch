diff --git a/demo/src/lib.rs b/demo/src/lib.rs
--- a/demo/src/lib.rs
+++ b/demo/src/lib.rs
@@ -1,6 +1,7 @@
+pub use blueprint::blueprint;
+
 mod blueprint;
 pub mod configuration;
 pub mod routes;
 pub mod telemetry;
-
-pub use blueprint::blueprint;
+pub mod user_agent;
diff --git a/demo/src/routes/greet.rs b/demo/src/routes/greet.rs
--- a/demo/src/routes/greet.rs
+++ b/demo/src/routes/greet.rs
@@ -1,14 +1,21 @@
 use pavex::request::route::RouteParams;
 use pavex::response::Response;
 
+use crate::user_agent::UserAgent;
+
 #[RouteParams]
 pub struct GreetParams {
     pub name: String,
 }
 
-pub fn greet(params: RouteParams<GreetParams>) -> Response {
-    let GreetParams { name }/* (1)! */ = params.0;
-    Response::ok() // (2)!
-        .set_typed_body(format!("Hello, {name}!")) // (3)!
+pub fn greet(params: RouteParams<GreetParams>, user_agent: UserAgent /* (1)! */) -> Response {
+    if let UserAgent::Unknown = user_agent {
+        return Response::unauthorized()
+            .set_typed_body("You must provide a `User-Agent` header")
+            .box_body();
+    }
+    let GreetParams { name } = params.0;
+    Response::ok()
+        .set_typed_body(format!("Hello, {name}!"))
         .box_body()
 }
diff --git a/demo/src/user_agent.rs b/demo/src/user_agent.rs
new file mode 100644
--- /dev/null
+++ b/demo/src/user_agent.rs
@@ -0,0 +1,6 @@
+pub enum UserAgent {
+    /// No `User-Agent` header was provided.
+    Unknown,
+    /// The value of the `User-Agent` header for the incoming request.
+    Known(String),
+}
