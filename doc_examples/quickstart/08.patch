diff --git a/app/src/blueprint.rs b/app/src/blueprint.rs
index e03ac7c..87475f0 100644
--- a/app/src/blueprint.rs
+++ b/app/src/blueprint.rs
@@ -11,7 +11,8 @@ pub fn blueprint() -> Blueprint {
     telemetry::register(&mut bp);
     AppConfig::register(&mut bp);

-    bp.request_scoped(f!(crate::user_agent::UserAgent::extract));
+    bp.request_scoped(f!(crate::user_agent::UserAgent::extract))
+        .error_handler(f!(crate::user_agent::invalid_user_agent));

     bp.route(GET, "/api/ping", f!(crate::routes::status::ping));
     bp.route(GET, "/api/greet/:name", f!(crate::routes::greet::greet));
diff --git a/app/src/user_agent.rs b/app/src/user_agent.rs
index bb1f65b..78360bd 100644
--- a/app/src/user_agent.rs
+++ b/app/src/user_agent.rs
@@ -1,5 +1,6 @@
 use pavex::http::header::{ToStrError, USER_AGENT};
 use pavex::request::RequestHead;
+use pavex::response::Response;

 pub enum UserAgent {
     /// No `User-Agent` header was provided.
@@ -17,3 +18,8 @@ impl UserAgent {
         user_agent.to_str().map(|s| UserAgent::Known(s.into()))
     }
 }
+
+pub fn invalid_user_agent(_e: &ToStrError) -> Response {
+    Response::bad_request()
+        .set_typed_body("The `User-Agent` header value must be a valid UTF-8 string")
+}
