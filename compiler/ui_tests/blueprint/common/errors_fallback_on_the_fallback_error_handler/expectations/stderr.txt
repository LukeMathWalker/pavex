[33;1mWARNING[0m:
  [33mâš [0m There is no specific error handler for `app::CustomError`, the
  [33mâ”‚[0m error returned by one of your request handlers.
  [33mâ”‚[0m It'll be converted to `pavex::Error` and handled by the fallback error
  [33mâ”‚[0m handler.
  [33mâ”‚[0m
  [33mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/errors_fallback_on_the_fallback_error_handler/src/lib.rs[0m:25:1]
  [33mâ”‚[0m  [2m25[0m â”‚
  [33mâ”‚[0m  [2m26[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[get(path = "/")]
  [33mâ”‚[0m  [2m27[0m â”‚ [35;1mâ”‚[0m   // No allow, this will trigger a warning.
  [33mâ”‚[0m  [2m28[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn handler(_dep: Dep) -> Result<Response, CustomError> {
  [33mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe fallible request handler was registered here[0m
  [33mâ”‚[0m  [2m29[0m â”‚         todo!()
  [33mâ”‚[0m     â•°â”€â”€â”€â”€
  [33mâ”‚[0m   [36mhelp:[0m Define an error handler for `app::CustomError`
  [33mâ”‚[0m   [36mhelp:[0m Add `allow(error_fallback)` to your component's attribute to silence
  [33mâ”‚[0m         this warning