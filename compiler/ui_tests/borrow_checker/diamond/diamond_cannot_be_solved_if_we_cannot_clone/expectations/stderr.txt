[31;1mERROR[0m:
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are a few different ways to unblock me: check out the help messages
  [31mâ”‚[0m below!
  [31mâ”‚[0m You only need to follow *one* of them.
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::A` in order to satisfy the borrow
  [31mâ”‚[0m         checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningPolicy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/diamond/diamond_cannot_be_solved_if_we_cannot_clone/src/lib.rs[0m:26:1]
  [31mâ”‚[0m        [2m26[0m â”‚
  [31mâ”‚[0m        [2m27[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped(id = "A_")]
  [31mâ”‚[0m        [2m28[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn a() -> A {
  [31mâ”‚[0m           Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m        [2m29[0m â”‚         todo!()
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of `app::a`.
  [31mâ”‚[0m         It takes `app::A` by value. Would a shared reference,
  [31mâ”‚[0m         `&app::A`, be enough?
  [31mâ”‚[0m   [36mhelp:[0m If `app::A` itself cannot implement `Clone`, consider
  [31mâ”‚[0m         wrapping it in an `std::sync::Rc` or `std::sync::Arc`.
[31;1mERROR[0m:
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are a few different ways to unblock me: check out the help messages
  [31mâ”‚[0m below!
  [31mâ”‚[0m You only need to follow *one* of them.
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::B` in order to satisfy the borrow
  [31mâ”‚[0m         checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningPolicy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/diamond/diamond_cannot_be_solved_if_we_cannot_clone/src/lib.rs[0m:32:1]
  [31mâ”‚[0m        [2m32[0m â”‚     // Being a singleton, this will be an input type of the dependency closure for the request handler
  [31mâ”‚[0m        [2m33[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::singleton(id = "B_")]
  [31mâ”‚[0m        [2m34[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn b() -> B {
  [31mâ”‚[0m           Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m        [2m35[0m â”‚         todo!()
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of `app::b`.
  [31mâ”‚[0m         It takes `app::B` by value. Would a shared reference,
  [31mâ”‚[0m         `&app::B`, be enough?
