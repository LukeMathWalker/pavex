//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    #[allow(dead_code)]
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    pub server: app::configuration::ServerConfig,
}
pub struct ApplicationState {}
impl ApplicationState {
    pub async fn new(
        _app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new().await)
    }
    async fn _new() -> crate::ApplicationState {
        crate::ApplicationState {}
    }
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/api/greet/{name}", 0u32).unwrap();
        router.insert("/api/ping", 1u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_0::entrypoint(
                    matched_route_template,
                    &allowed_methods,
                    &request_head,
                )
                .await;
        };
        let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
            .params
            .into();
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/greet/{name}",
                        );
                        route_1::entrypoint(
                                matched_route_template,
                                url_params,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/greet/{name}",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_2::entrypoint(matched_route_template, &request_head).await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &allowed_methods,
                                &request_head,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::router::AllowedMethods,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_1(s_1, s_2, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::router::AllowedMethods,
        v2: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v3 = crate::route_0::Next0 {
            s_0: v1,
            s_1: v0,
            s_2: v2,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v1, v0, v3);
        let v5 = crate::route_0::Next1 {
            s_0: &v4,
            s_1: v2,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v8)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a pavex::router::AllowedMethods,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
    ) -> pavex::Response {
        let response = wrapping_1(s_0, s_2, s_1).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = handler(s_1, s_0, s_2).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v3 = crate::route_1::Next0 {
            s_0: v1,
            s_1: v2,
            s_2: v0,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v2, v1, v3);
        let v5 = crate::route_1::Next1 {
            s_0: &v4,
            s_1: v0,
            s_2: v2,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
        v2: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v3 = pavex::request::path::PathParams::extract(v0);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v4,
                    );
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v1).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        let v5 = app::user_agent::UserAgent::extract(v2);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = app::user_agent::invalid_user_agent(&v6);
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v1).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        let v7 = app::routes::greet::greet(v4, v6);
        <pavex::Response as pavex::IntoResponse>::into_response(v7)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        next: fn(
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex::request::RequestHead,
            pavex::request::path::MatchedPathPattern,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        s_2: &'d pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'b, 'c>,
            &'d pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_1(s_0, s_1).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v2 = crate::route_2::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_2::Next1 {
            s_0: &v3,
            next: stage_2,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v7)
    }
    async fn handler() -> pavex::Response {
        let v0 = app::routes::ping::ping();
        <http::StatusCode as pavex::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        next: fn(
            pavex::request::path::MatchedPathPattern,
            &'a pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
