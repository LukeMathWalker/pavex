[33;1mWARNING[0m:
  [33mâš [0m There is no specific error handler for
  [33mâ”‚[0m `http::header::ToStrError`, the error returned by one of your
  [33mâ”‚[0m constructors.
  [33mâ”‚[0m It'll be converted to `pavex::Error` and handled by the fallback
  [33mâ”‚[0m error handler.
  [33mâ”‚[0m
  [33mâ”‚[0m     â•­â”€[[36;1;4mquickstart/project/app/src/user_agent.rs[0m:13:1]
  [33mâ”‚[0m  [2m13[0m â”‚     impl UserAgent {
  [33mâ”‚[0m  [2m14[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m     #[request_scoped]
  [33mâ”‚[0m  [2m15[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m     pub fn extract(request_head: &RequestHead) -> Result<Self, ToStrError> {
  [33mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe fallible constructor was registered here[0m
  [33mâ”‚[0m  [2m16[0m â”‚             let Some(user_agent) = request_head.headers.get(USER_AGENT) else {
  [33mâ”‚[0m     â•°â”€â”€â”€â”€
  [33mâ”‚[0m   [36mhelp:[0m Define an error handler for `http::header::ToStrError`
  [33mâ”‚[0m   [36mhelp:[0m Add `allow(error_fallback)` to your component's attribute to
  [33mâ”‚[0m         silence this warning

