From 2da9e8cdd1ad50af8327e37f5eb4a70e294e080d Mon Sep 17 00:00:00 2001
From: Luca Palmieri <20745048+LukeMathWalker@users.noreply.github.com>
Date: Wed, 23 Jul 2025 11:47:47 +0200
Subject: [PATCH 01/32] Codegen

---
 server_sdk/Cargo.toml |  12 +-
 server_sdk/src/lib.rs | 328 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 339 insertions(+), 1 deletion(-)

diff --git a/server_sdk/Cargo.toml b/server_sdk/Cargo.toml
index ed30c79..ffb9ae7 100644
--- a/server_sdk/Cargo.toml
+++ b/server_sdk/Cargo.toml
@@ -1,7 +1,7 @@
 [package]
 name = "server_sdk"
 version = "0.1.0"
-edition.workspace = true
+edition = "2024"
 
 [package.metadata.px.generate]
 generator_type = "cargo_workspace_binary"
@@ -14,3 +14,13 @@ verifier_args = ["--check"]
 
 [lints]
 clippy = { all = "allow" }
+
+[dependencies]
+app = { version = "0.1", path = "../app", default-features = false }
+http = { version = "1", default-features = false }
+hyper = { version = "1", default-features = false }
+matchit = { version = "0.8", default-features = false }
+pavex = { version = "0.1", path = "../../../../../libs/pavex", default-features = false }
+pavex_tracing = { version = "0.1", path = "../../../../../libs/pavex_tracing", default-features = false }
+serde = { version = "1", default-features = false }
+thiserror = { version = "2", default-features = false }
diff --git a/server_sdk/src/lib.rs b/server_sdk/src/lib.rs
index e69de29..58cd69e 100644
--- a/server_sdk/src/lib.rs
+++ b/server_sdk/src/lib.rs
@@ -0,0 +1,328 @@
+//! Do NOT edit this code.
+//! It was automatically generated by Pavex.
+//! All manual edits will be lost next time the code is generated.
+extern crate alloc;
+struct ServerState {
+    router: Router,
+    #[allow(dead_code)]
+    application_state: ApplicationState,
+}
+#[derive(Debug, Clone, serde::Deserialize)]
+pub struct ApplicationConfig {
+    pub server: app::configuration::ServerConfig,
+}
+pub struct ApplicationState {}
+impl ApplicationState {
+    pub async fn new(
+        _app_config: crate::ApplicationConfig,
+    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
+        Ok(Self::_new().await)
+    }
+    async fn _new() -> crate::ApplicationState {
+        crate::ApplicationState {}
+    }
+}
+#[deprecated(note = "Use `ApplicationState::new` instead.")]
+pub async fn build_application_state(
+    _app_config: crate::ApplicationConfig,
+) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
+    crate::ApplicationState::new(_app_config).await
+}
+#[derive(Debug, thiserror::Error)]
+pub enum ApplicationStateError {}
+pub fn run(
+    server_builder: pavex::server::Server,
+    application_state: ApplicationState,
+) -> pavex::server::ServerHandle {
+    async fn handler(
+        request: http::Request<hyper::body::Incoming>,
+        connection_info: Option<pavex::connection::ConnectionInfo>,
+        server_state: std::sync::Arc<ServerState>,
+    ) -> pavex::response::Response {
+        let (router, state) = (&server_state.router, &server_state.application_state);
+        router.route(request, connection_info, state).await
+    }
+    let router = Router::new();
+    let server_state = std::sync::Arc::new(ServerState {
+        router,
+        application_state,
+    });
+    server_builder.serve(handler, server_state)
+}
+struct Router {
+    router: matchit::Router<u32>,
+}
+impl Router {
+    /// Create a new router instance.
+    ///
+    /// This method is invoked once, when the server starts.
+    pub fn new() -> Self {
+        Self { router: Self::router() }
+    }
+    fn router() -> matchit::Router<u32> {
+        let mut router = matchit::Router::new();
+        router.insert("/api/ping", 0u32).unwrap();
+        router
+    }
+    pub async fn route(
+        &self,
+        request: http::Request<hyper::body::Incoming>,
+        _connection_info: Option<pavex::connection::ConnectionInfo>,
+        #[allow(unused)]
+        state: &ApplicationState,
+    ) -> pavex::response::Response {
+        let (request_head, _) = request.into_parts();
+        let request_head: pavex::request::RequestHead = request_head.into();
+        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
+            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
+                    vec![],
+                )
+                .into();
+            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
+                "*",
+            );
+            return route_0::entrypoint(
+                    matched_route_template,
+                    &allowed_methods,
+                    &request_head,
+                )
+                .await;
+        };
+        match matched_route.value {
+            0u32 => {
+                match &request_head.method {
+                    &pavex::http::Method::GET => {
+                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
+                            "/api/ping",
+                        );
+                        route_1::entrypoint(matched_route_template, &request_head).await
+                    }
+                    _ => {
+                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
+                                pavex::http::Method::GET,
+                            ])
+                            .into();
+                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
+                            "/api/ping",
+                        );
+                        route_0::entrypoint(
+                                matched_route_template,
+                                &allowed_methods,
+                                &request_head,
+                            )
+                            .await
+                    }
+                }
+            }
+            i => unreachable!("Unknown route id: {}", i),
+        }
+    }
+}
+pub mod route_0 {
+    pub async fn entrypoint<'a, 'b>(
+        s_0: pavex::request::path::MatchedPathPattern,
+        s_1: &'a pavex::router::AllowedMethods,
+        s_2: &'b pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let response = wrapping_0(s_0, s_1, s_2).await;
+        response
+    }
+    async fn stage_1<'a, 'b>(
+        s_0: &'a pavex::router::AllowedMethods,
+        s_1: pavex::request::path::MatchedPathPattern,
+        s_2: &'b pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let response = wrapping_1(s_1, s_2, s_0).await;
+        response
+    }
+    async fn stage_2<'a, 'b>(
+        s_0: &'a pavex_tracing::RootSpan,
+        s_1: &'b pavex::router::AllowedMethods,
+    ) -> pavex::response::Response {
+        let response = handler(s_1).await;
+        let response = post_processing_0(response, s_0).await;
+        response
+    }
+    async fn wrapping_0(
+        v0: pavex::request::path::MatchedPathPattern,
+        v1: &pavex::router::AllowedMethods,
+        v2: &pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let v3 = crate::route_0::Next0 {
+            s_0: v1,
+            s_1: v0,
+            s_2: v2,
+            next: stage_1,
+        };
+        let v4 = pavex::middleware::Next::new(v3);
+        let v5 = pavex::middleware::wrap_noop(v4).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
+    }
+    async fn wrapping_1(
+        v0: pavex::request::path::MatchedPathPattern,
+        v1: &pavex::request::RequestHead,
+        v2: &pavex::router::AllowedMethods,
+    ) -> pavex::response::Response {
+        let v3 = pavex::telemetry::ServerRequestId::generate();
+        let v4 = app::telemetry::root_span(v1, v0, v3);
+        let v5 = crate::route_0::Next1 {
+            s_0: &v4,
+            s_1: v2,
+            next: stage_2,
+        };
+        let v6 = pavex::middleware::Next::new(v5);
+        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
+        let v8 = pavex_tracing::logger(v7, v6).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
+    }
+    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
+        let v1 = pavex::router::default_fallback(v0).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
+    }
+    async fn post_processing_0(
+        v0: pavex::response::Response,
+        v1: &pavex_tracing::RootSpan,
+    ) -> pavex::response::Response {
+        let v2 = app::telemetry::response_logger(v0, v1).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
+    }
+    struct Next0<'a, 'b, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        s_0: &'a pavex::router::AllowedMethods,
+        s_1: pavex::request::path::MatchedPathPattern,
+        s_2: &'b pavex::request::RequestHead,
+        next: fn(
+            &'a pavex::router::AllowedMethods,
+            pavex::request::path::MatchedPathPattern,
+            &'b pavex::request::RequestHead,
+        ) -> T,
+    }
+    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        type Output = pavex::response::Response;
+        type IntoFuture = T;
+        fn into_future(self) -> Self::IntoFuture {
+            (self.next)(self.s_0, self.s_1, self.s_2)
+        }
+    }
+    struct Next1<'a, 'b, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        s_0: &'a pavex_tracing::RootSpan,
+        s_1: &'b pavex::router::AllowedMethods,
+        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
+    }
+    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        type Output = pavex::response::Response;
+        type IntoFuture = T;
+        fn into_future(self) -> Self::IntoFuture {
+            (self.next)(self.s_0, self.s_1)
+        }
+    }
+}
+pub mod route_1 {
+    pub async fn entrypoint<'a>(
+        s_0: pavex::request::path::MatchedPathPattern,
+        s_1: &'a pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let response = wrapping_0(s_0, s_1).await;
+        response
+    }
+    async fn stage_1<'a>(
+        s_0: pavex::request::path::MatchedPathPattern,
+        s_1: &'a pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let response = wrapping_1(s_0, s_1).await;
+        response
+    }
+    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::response::Response {
+        let response = handler().await;
+        let response = post_processing_0(response, s_0).await;
+        response
+    }
+    async fn wrapping_0(
+        v0: pavex::request::path::MatchedPathPattern,
+        v1: &pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let v2 = crate::route_1::Next0 {
+            s_0: v0,
+            s_1: v1,
+            next: stage_1,
+        };
+        let v3 = pavex::middleware::Next::new(v2);
+        let v4 = pavex::middleware::wrap_noop(v3).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
+    }
+    async fn wrapping_1(
+        v0: pavex::request::path::MatchedPathPattern,
+        v1: &pavex::request::RequestHead,
+    ) -> pavex::response::Response {
+        let v2 = pavex::telemetry::ServerRequestId::generate();
+        let v3 = app::telemetry::root_span(v1, v0, v2);
+        let v4 = crate::route_1::Next1 {
+            s_0: &v3,
+            next: stage_2,
+        };
+        let v5 = pavex::middleware::Next::new(v4);
+        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
+        let v7 = pavex_tracing::logger(v6, v5).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
+    }
+    async fn handler() -> pavex::response::Response {
+        let v0 = app::routes::ping::ping();
+        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
+    }
+    async fn post_processing_0(
+        v0: pavex::response::Response,
+        v1: &pavex_tracing::RootSpan,
+    ) -> pavex::response::Response {
+        let v2 = app::telemetry::response_logger(v0, v1).await;
+        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
+    }
+    struct Next0<'a, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        s_0: pavex::request::path::MatchedPathPattern,
+        s_1: &'a pavex::request::RequestHead,
+        next: fn(
+            pavex::request::path::MatchedPathPattern,
+            &'a pavex::request::RequestHead,
+        ) -> T,
+    }
+    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        type Output = pavex::response::Response;
+        type IntoFuture = T;
+        fn into_future(self) -> Self::IntoFuture {
+            (self.next)(self.s_0, self.s_1)
+        }
+    }
+    struct Next1<'a, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        s_0: &'a pavex_tracing::RootSpan,
+        next: fn(&'a pavex_tracing::RootSpan) -> T,
+    }
+    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
+    where
+        T: std::future::Future<Output = pavex::response::Response>,
+    {
+        type Output = pavex::response::Response;
+        type IntoFuture = T;
+        fn into_future(self) -> Self::IntoFuture {
+            (self.next)(self.s_0)
+        }
+    }
+}
-- 
2.39.5 (Apple Git-154)

