//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    #[serde(default)]
    pub cookies: biscotti::ProcessorConfig,
}
pub struct ApplicationState {
    pub processor: biscotti::Processor,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(app_config.cookies).await)
    }
    async fn _new(v0: biscotti::ProcessorConfig) -> crate::ApplicationState {
        let v1 = pavex::cookie::config_into_processor(v0);
        crate::ApplicationState { processor: v1 }
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    app_config: crate::ApplicationConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(app_config).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self {
            router: Self::router(),
        }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/delete/", 0u32).unwrap();
        router.insert("/get_all/", 1u32).unwrap();
        router.insert("/get_one/", 2u32).unwrap();
        router.insert("/insert/", 3u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)] state: &ApplicationState,
    ) -> pavex::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods =
                pavex::router::MethodAllowList::from_iter(vec![]).into();
            return route_0::entrypoint(&state.processor, &allowed_methods).await;
        };
        match matched_route.value {
            0u32 => match &request_head.method {
                &pavex::http::Method::GET => route_1::entrypoint(&state.processor).await,
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods =
                        pavex::router::MethodAllowList::from_iter([pavex::http::Method::GET])
                            .into();
                    route_0::entrypoint(&state.processor, &allowed_methods).await
                }
            },
            1u32 => match &request_head.method {
                &pavex::http::Method::GET => {
                    route_3::entrypoint(&state.processor, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods =
                        pavex::router::MethodAllowList::from_iter([pavex::http::Method::GET])
                            .into();
                    route_0::entrypoint(&state.processor, &allowed_methods).await
                }
            },
            2u32 => match &request_head.method {
                &pavex::http::Method::GET => {
                    route_4::entrypoint(&state.processor, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods =
                        pavex::router::MethodAllowList::from_iter([pavex::http::Method::GET])
                            .into();
                    route_0::entrypoint(&state.processor, &allowed_methods).await
                }
            },
            3u32 => match &request_head.method {
                &pavex::http::Method::GET => route_2::entrypoint(&state.processor).await,
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods =
                        pavex::router::MethodAllowList::from_iter([pavex::http::Method::GET])
                            .into();
                    route_0::entrypoint(&state.processor, &allowed_methods).await
                }
            },
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let v2 = crate::route_0::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(v0: pavex::Response, v1: &biscotti::Processor) -> pavex::Response {
        let v2 = pavex::cookie::ResponseCookies::new();
        let v3 = pavex::cookie::inject_response_cookies(v0, v2, v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::cookie::errors::InjectResponseCookiesError::into_response(&v4);
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a biscotti::Processor, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a>(s_0: &'a biscotti::Processor) -> pavex::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        mut s_0: pavex::cookie::ResponseCookies,
        s_1: &'a biscotti::Processor,
    ) -> pavex::Response {
        let response = handler(&mut s_0).await;
        let response = post_processing_0(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(v0: &biscotti::Processor) -> pavex::Response {
        let v1 = pavex::cookie::ResponseCookies::new();
        let v2 = crate::route_1::Next0 {
            s_0: v1,
            s_1: v0,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler(v0: &mut pavex::cookie::ResponseCookies) -> pavex::Response {
        let v1 = cookies::delete::delete_cookie(v0);
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
    ) -> pavex::Response {
        let v3 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::cookie::errors::InjectResponseCookiesError::into_response(&v4);
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex::cookie::ResponseCookies,
        s_1: &'a biscotti::Processor,
        next: fn(pavex::cookie::ResponseCookies, &'a biscotti::Processor) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a>(s_0: &'a biscotti::Processor) -> pavex::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        mut s_0: pavex::cookie::ResponseCookies,
        s_1: &'a biscotti::Processor,
    ) -> pavex::Response {
        let response = handler(&mut s_0).await;
        let response = post_processing_0(response, s_0, s_1).await;
        response
    }
    async fn wrapping_0(v0: &biscotti::Processor) -> pavex::Response {
        let v1 = pavex::cookie::ResponseCookies::new();
        let v2 = crate::route_2::Next0 {
            s_0: v1,
            s_1: v0,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler(v0: &mut pavex::cookie::ResponseCookies) -> pavex::Response {
        let v1 = cookies::insert::insert_cookie(v0);
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
    ) -> pavex::Response {
        let v3 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::cookie::errors::InjectResponseCookiesError::into_response(&v4);
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex::cookie::ResponseCookies,
        s_1: &'a biscotti::Processor,
        next: fn(pavex::cookie::ResponseCookies, &'a biscotti::Processor) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v2 = crate::route_3::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &biscotti::Processor,
    ) -> pavex::Response {
        let v2 = pavex::cookie::extract_request_cookies(v0, v1);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(&v3);
                    <pavex::Response as pavex::IntoResponse>::into_response(v4)
                };
            }
        };
        let v4 = cookies::get_all::get_all(&v3);
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(v0: pavex::Response, v1: &biscotti::Processor) -> pavex::Response {
        let v2 = pavex::cookie::ResponseCookies::new();
        let v3 = pavex::cookie::inject_response_cookies(v0, v2, v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::cookie::errors::InjectResponseCookiesError::into_response(&v4);
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'a biscotti::Processor, &'b pavex::request::RequestHead) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v2 = crate::route_4::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &biscotti::Processor,
    ) -> pavex::Response {
        let v2 = pavex::cookie::extract_request_cookies(v0, v1);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(&v3);
                    <pavex::Response as pavex::IntoResponse>::into_response(v4)
                };
            }
        };
        let v4 = cookies::get_one::get_one(&v3);
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(v0: pavex::Response, v1: &biscotti::Processor) -> pavex::Response {
        let v2 = pavex::cookie::ResponseCookies::new();
        let v3 = pavex::cookie::inject_response_cookies(v0, v2, v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::cookie::errors::InjectResponseCookiesError::into_response(&v4);
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        next: fn(&'a biscotti::Processor, &'b pavex::request::RequestHead) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
