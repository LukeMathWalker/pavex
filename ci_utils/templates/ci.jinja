# This whole file is generated by a Rust script under `ci_utils`
# Do NOT edit this file manually.
name: Build and store docs artifact

on:
  workflow_dispatch:
  # See https://github.com/imjohnbo/ok-to-test/tree/master for an overview
  # of how this works.
  # I officially hate GitHub for forbidding OpenID Connect tokens in forks.
  repository_dispatch:
    types: [ok-to-test-command]
  push:
    branches:
      - main

jobs:
  <%- for (os, target, binary_extension) in [
    ('ubuntu-latest', 'linux', ''),
    ('macos-14', 'macos', ''),
    ('windows-2022', 'windows', '.exe')
  ] %>

  build_clis_<<- target >>:
    name: "Build CLIs (<<- target >>)"
    runs-on: << os >>
      <% set job_name %>Build CLIs (<<- target >>)<% endset %>
      <%- from 'build_clis_steps' import output -%>
      <<- output | indent(4) >>

  <% if target == 'linux' %>
  lint_<<- target >>:
    name: "Lint (<<- target >>)"
    runs-on: << os >>
      <% set job_name %>Lint (<<- target >>)<% endset %>
      <%- from 'lint_steps' import output -%>
      <<- output | indent(4) >>

  starter_<<- target >>:
    name: "Starter (<<- target >>)"
    runs-on: << os >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Starter project (<<- target >>)<% endset %>
      <%- from 'starter_steps' import output -%>
      <<- output | indent(4) >>

  macro_tests_<<- target >>:
    name: "Run macro tests (<<- target >>)"
    runs-on: << os >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Run macro tests (<<- target >>)<% endset %>
      <%- from 'macro_tests_steps' import output -%>
      <<- output | indent(4) >>

  <% for example in examples %>
  example_<<example.name>>_<<- target >>:
    name: "Example << example.name >> (<<- target >>)"
    runs-on: << os >>
    defaults:
      run:
        working-directory: examples/<< example.name >>
    << example.services | indent(4) >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Example << example.name >> (<<- target >>)<% endset %>
      <%- from 'example_steps' import output -%>
      <<- output | indent(4) >>
  <% endfor %>
  <% for lib in libs_with_deps %>
  tests_<<lib.name>>_<<- target >>:
    name: "Tests for `<< lib.name >>` (<<- target >>)"
    # Jobs with Dockerized `services` can only be run on Linux
    runs-on: << os >>
    << lib.services | indent(4) >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Tests << lib.name >> (<<- target >>)<% endset %>
      <%- from 'single_lib_tests_steps' import output -%>
      <<- output | indent(4) >>
  <% endfor %>
  <%- endif %>

  tests_<<- target >>:
    name: "Run tests (<<- target >>)"
    runs-on: << os >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Run tests (<<- target >>)<% endset %>
      <%- from 'tests_steps' import output -%>
      <<- output | indent(4) >>
  tests_pavex_<<- target >>:
    name: "Run `pavex` tests (<<- target >>)"
    runs-on: << os >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Run `pavex` tests (<<- target >>)<% endset %>
      <%- from 'pavex_tests_steps' import output -%>
      <<- output | indent(4) >>
  ui_tests_<<- target >>:
    name: "Run UI tests (<<- target >>)"
    runs-on: << os >>
    needs:
      - build_clis_<<- target >>
      <% set job_name %>Run UI tests (<<- target >>)<% endset %>
      <%- from 'ui_tests_steps' import output -%>
      <<- output | indent(4) >>
  <%- endfor %>

  build_pxh:
    runs-on: ubuntu-latest
    <%- with job_name = 'Build pxh' -%>
      <%- from 'build_pxh_steps' import output -%>
      <<- output | indent(4) ->>
    <%- endwith %>

  is_up_to_date:
    runs-on: ubuntu-latest
    env:
      PAVEX_PAVEXC: "/home/runner/.cargo/bin/pavexc"
    needs:
      - build_clis_linux
      - build_pxh
    <%- with job_name = 'Check if up to date' -%>
      <%- from 'is_up_to_date_steps' import output -%>
      <<- output | indent(4) >>
    <%- endwith %>

  build_docs:
    runs-on: ubuntu-latest
    <%- with job_name = 'Build docs' %>
      <%- from 'build_docs_steps' import output %>
      <<- output | indent(4) >>
    <%- endwith %>

  format_docs:
    runs-on: ubuntu-latest
    <%- with job_name = 'Format docs' %>
        <%- from 'format_docs_steps' import output %>
        <<- output | indent(4) >>
    <%- endwith %>
