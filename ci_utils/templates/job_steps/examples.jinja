<% extends 'steps' %>
<% block inner_steps %>
- name: Install Rust
  uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
  with:
    cache-workspaces: "./examples/starter -> ./target"
- name: Install cargo-binstall
  uses: cargo-bins/cargo-binstall@main
- name: Install cargo-px
  run: cargo binstall -y --force --github-token=${{ secrets.GITHUB_TOKEN }} cargo-px --version="^0.1.15"
<% include 'setup_pavex' %>
- name: Check that starter is fresh
  env:
    PAVEX_DEBUG: "true"
    PAVEX_PAVEXC: << pavexc_path(target) >>
  run: |
    cd examples/starter
    cargo fmt --check
    cargo px verify-freshness
- name: Check starter compiles and it's up to date
  env:
    PAVEX_DEBUG: "true"
    PAVEX_PAVEXC: << pavexc_path(target) >>
    # Avoid spurious differences due to Pavex releases
    CARGO_GENERATE_VALUE_PAVEX_PACKAGE_SPEC: "0.1"
    CARGO_GENERATE_VALUE_PAVEX_TRACING_PACKAGE_SPEC: "0.1"
    CARGO_GENERATE_VALUE_PAVEX_CLI_CLIENT_PACKAGE_SPEC: "0.1"
  run: |
    cd examples
    # Save the target folder before deleting, since it's warm
    mv starter/target target && rm -rf starter
    pavex new starter
    # Remove the git folder
    rm -rf starter/.git
    # Move the target folder back
    mv target starter/target
    cd starter
    cargo px test
- name: Check if any of the files changed
  run: |
    git diff --exit-code HEAD -- examples/starter  ":(exclude)Cargo.lock" || (echo "Starter project is not up to date. Regenerate it using 'pavex new'" && exit 1)
<%- endblock %>
