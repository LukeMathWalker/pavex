digraph "GET /home - 0" {
    0 [ label = "app::stream_file(std::path::PathBuf, app::Logger, app::HttpClient) -> pavex::response::Response"]
    1 [ label = "core::prelude::rust_2015::Result<std::path::PathBuf, app::ExtractPathError<alloc::string::String>> -> std::path::PathBuf"]
    2 [ label = "app::logger() -> app::Logger"]
    3 [ label = "app::HttpClient"]
    4 [ label = "app::extract_path(pavex::request::RequestHead) -> core::prelude::rust_2015::Result<std::path::PathBuf, app::ExtractPathError<alloc::string::String>>"]
    5 [ label = "pavex::request::RequestHead"]
    6 [ label = "<pavex::response::Response as pavex::response::IntoResponse>::into_response(pavex::response::Response) -> pavex::response::Response"]
    7 [ label = "core::prelude::rust_2015::Result<std::path::PathBuf, app::ExtractPathError<alloc::string::String>> -> app::ExtractPathError<alloc::string::String>"]
    8 [ label = "app::handle_extract_path_error(&app::ExtractPathError<alloc::string::String>, app::Logger) -> pavex::response::Response"]
    9 [ label = "<pavex::response::Response as pavex::response::IntoResponse>::into_response(pavex::response::Response) -> pavex::response::Response"]
    10 [ label = "app::logger() -> app::Logger"]
    11 [ label = "`match`"]
    3 -> 0 [ ]
    2 -> 0 [ ]
    1 -> 0 [ ]
    11 -> 7 [ ]
    5 -> 4 [ ]
    0 -> 6 [ ]
    11 -> 1 [ ]
    8 -> 9 [ ]
    7 -> 8 [ label = "&"]
    10 -> 8 [ ]
    4 -> 11 [ ]
}

digraph "* /home - 0" {
    0 [ label = "pavex::router::default_fallback(&pavex::router::AllowedMethods) -> pavex::response::Response"]
    2 [ label = "<pavex::response::Response as pavex::response::IntoResponse>::into_response(pavex::response::Response) -> pavex::response::Response"]
    3 [ label = "&pavex::router::AllowedMethods"]
    0 -> 2 [ ]
    3 -> 0 [ ]
}

digraph app_state {
    0 [ label = "crate::ApplicationState(app::HttpClient) -> crate::ApplicationState"]
    1 [ label = "app::http_client(app::Config) -> app::HttpClient"]
    2 [ label = "app::Config"]
    1 -> 0 [ ]
    2 -> 1 [ ]
}