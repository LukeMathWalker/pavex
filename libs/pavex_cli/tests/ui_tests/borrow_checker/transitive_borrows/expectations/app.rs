//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
use std as alloc;
struct ServerState {
    router: pavex::routing::Router<u32>,
    application_state: ApplicationState,
}
pub struct ApplicationState {}
pub async fn build_application_state() -> crate::ApplicationState {
    crate::ApplicationState {}
}
pub async fn run(
    server_builder: pavex::hyper::server::Builder<pavex::hyper::server::conn::AddrIncoming>,
    application_state: ApplicationState,
) -> Result<(), pavex::Error> {
    let server_state = std::sync::Arc::new(ServerState {
        router: build_router().map_err(pavex::Error::new)?,
        application_state,
    });
    let make_service = pavex::hyper::service::make_service_fn(move |_| {
        let server_state = server_state.clone();
        async move {
            Ok::<_, pavex::hyper::Error>(pavex::hyper::service::service_fn(move |request| {
                let server_state = server_state.clone();
                async move { Ok::<_, pavex::hyper::Error>(route_request(request, server_state).await) }
            }))
        }
    });
    server_builder
        .serve(make_service)
        .await
        .map_err(pavex::Error::new)
}
fn build_router() -> Result<pavex::routing::Router<u32>, pavex::routing::InsertError> {
    let mut router = pavex::routing::Router::new();
    router.insert("/home", 0u32)?;
    Ok(router)
}
async fn route_request(
    request: pavex::request::RequestHead,
    server_state: std::sync::Arc<ServerState>,
) -> pavex::response::Response {
    let matched_route = match server_state.router.at(request.uri().path()) {
        Ok(m) => m,
        Err(_) => {
            return pavex::response::Response::builder()
                .status(pavex::http::StatusCode::NOT_FOUND)
                .body(pavex::body::boxed(hyper::body::Body::empty()))
                .unwrap();
        }
    };
    let route_id = matched_route.value;
    #[allow(unused)]
    let url_params: pavex::extract::route::RawRouteParams<'_, '_> = matched_route.params.into();
    match route_id {
        0u32 => match request.method() {
            &pavex::http::Method::GET => route_handler_0().await,
            _ => pavex::response::Response::builder()
                .status(pavex::http::StatusCode::METHOD_NOT_ALLOWED)
                .header(pavex::http::header::ALLOW, "GET")
                .body(pavex::body::boxed(hyper::body::Body::empty()))
                .unwrap(),
        },
        _ => pavex::response::Response::builder()
            .status(pavex::http::StatusCode::NOT_FOUND)
            .body(pavex::body::boxed(hyper::body::Body::empty()))
            .unwrap(),
    }
}
pub async fn route_handler_0(
) -> http::Response<http_body::combinators::BoxBody<bytes::Bytes, pavex::Error>> {
    let v0 = app::a();
    let v1 = app::c(&v0);
    let v2 = app::b(v0);
    let v3 = app::handler(v1, v2);
    <http::Response<
        http_body::combinators::BoxBody<bytes::Bytes, pavex::Error>,
    > as pavex::response::IntoResponse>::into_response(v3)
}
