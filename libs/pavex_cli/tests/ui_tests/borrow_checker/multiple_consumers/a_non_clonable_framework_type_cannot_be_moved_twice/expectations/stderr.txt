[31m[1mERROR[0m[39m: 
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are 2 components that take `pavex::request::RequestHead` as an
  [31mâ”‚[0m input parameter, consuming it by value. Since I'm not allowed to clone
  [31mâ”‚[0m `pavex::request::RequestHead`, I can't resolve this conflict.
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of the components that consume
  [31mâ”‚[0m         `pavex::request::RequestHead` by value.
  [31mâ”‚[0m         Would a shared reference, `&pavex::request::RequestHead`, be enough?
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4msrc/lib.rs[0m:43:1]
  [31mâ”‚[0m        [2m43[0m â”‚     bp.constructor(f!(crate::b), Lifecycle::RequestScoped);
  [31mâ”‚[0m        [2m44[0m â”‚     bp.constructor(f!(crate::c), Lifecycle::RequestScoped);
  [31mâ”‚[0m           Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                          [35;1mâ•°â”€â”€ [35;1mOne of the consuming constructors[0m[0m
  [31mâ”‚[0m        [2m45[0m â”‚     bp.route(GET, "/home", f!(crate::handler));
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4msrc/lib.rs[0m:42:1]
  [31mâ”‚[0m        [2m42[0m â”‚     let mut bp = Blueprint::new();
  [31mâ”‚[0m        [2m43[0m â”‚     bp.constructor(f!(crate::b), Lifecycle::RequestScoped);
  [31mâ”‚[0m           Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                          [35;1mâ•°â”€â”€ [35;1mOne of the consuming constructors[0m[0m
  [31mâ”‚[0m        [2m44[0m â”‚     bp.constructor(f!(crate::c), Lifecycle::RequestScoped);
  [31mâ”‚[0m           â•°â”€â”€â”€â”€