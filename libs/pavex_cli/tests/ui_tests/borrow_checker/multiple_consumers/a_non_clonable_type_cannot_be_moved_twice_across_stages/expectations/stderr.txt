[31m[1mERROR[0m[39m: 
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are 2 components that take `app::A` as an input parameter, consuming
  [31mâ”‚[0m it by value:
  [31mâ”‚[0m - `app::mw`, a wrapping middleware
  [31mâ”‚[0m - `crate::route_0::Next1`
  [31mâ”‚[0m Since I'm not allowed to clone `app::A`, I can't resolve this conflict.
  [31mâ”‚[0m 
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::A` in order to satisfy the borrow checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningStrategy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4msrc/lib.rs[0m:29:1]
  [31mâ”‚[0m        [2m29[0m â”‚     let mut bp = Blueprint::new();
  [31mâ”‚[0m        [2m30[0m â”‚     bp.constructor(f!(crate::a), Lifecycle::RequestScoped);
  [31mâ”‚[0m           Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                          [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m        [2m31[0m â”‚     bp.wrap(f!(crate::mw));
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of the components that consume
  [31mâ”‚[0m         `app::A` by value.
  [31mâ”‚[0m         Would a shared reference, `&app::A`, be enough?
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4msrc/lib.rs[0m:30:1]
  [31mâ”‚[0m        [2m30[0m â”‚     bp.constructor(f!(crate::a), Lifecycle::RequestScoped);
  [31mâ”‚[0m        [2m31[0m â”‚     bp.wrap(f!(crate::mw));
  [31mâ”‚[0m           Â· [35;1m            â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                   [35;1mâ•°â”€â”€ One of the consuming wrapping middlewares[0m
  [31mâ”‚[0m        [2m32[0m â”‚     bp.route(GET, "/home", f!(crate::handler));
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m If `app::A` itself cannot implement `Clone`, consider wrapping it in
  [31mâ”‚[0m         an `std::sync::Rc` or `std::sync::Arc`.