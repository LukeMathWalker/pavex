[31m[1mERROR[0m[39m: 
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint:
  [31mâ”‚[0m - `app::handler` wants to borrow `app::A`
  [31mâ”‚[0m - But `app::b`, which is invoked earlier on, consumes `app::A` by value
  [31mâ”‚[0m 
  [31mâ”‚[0m Since I'm not allowed to clone `app::A`, I can't resolve this conflict.
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::A` in order to satisfy the borrow checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningStrategy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4msrc/lib.rs[0m:37:1]
  [31mâ”‚[0m        [2m37[0m â”‚     // A is a singleton, so it will be an input parameter of the dependency closure for `handler`
  [31mâ”‚[0m        [2m38[0m â”‚     bp.constructor(f!(crate::a), Lifecycle::Singleton);
  [31mâ”‚[0m           Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                          [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m        [2m39[0m â”‚     bp.constructor(f!(crate::b), Lifecycle::RequestScoped);
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Consider changing the signature of `app::b`.
  [31mâ”‚[0m         It takes `app::A` by value. Would a shared reference, `&app::A`, be
  [31mâ”‚[0m         enough?