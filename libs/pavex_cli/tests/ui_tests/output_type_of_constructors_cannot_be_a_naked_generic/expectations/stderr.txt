[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't return a naked generic parameter from a constructor, like `T`
  [31mâ”‚[0m in `app::naked`.
  [31mâ”‚[0m I don't take into account trait bounds when building your dependency
  [31mâ”‚[0m graph. A constructor that returns a naked generic parameter is equivalent,
  [31mâ”‚[0m in my eyes, to a constructor that can build **any** type, which is
  [31mâ”‚[0m unlikely to be what you want!
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:22:1]
  [31mâ”‚[0m  [2m22[0m â”‚     let mut bp = Blueprint::new();
  [31mâ”‚[0m  [2m23[0m â”‚     bp.constructor(f!(crate::naked), Lifecycle::RequestScoped);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                            [35;1mâ•°â”€â”€ [35;1mThe constructor was registered here[0m[0m
  [31mâ”‚[0m  [2m24[0m â”‚     bp.constructor(f!(crate::fallible_naked), Lifecycle::RequestScoped)
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4msrc/lib.rs[0m:1:1]
  [31mâ”‚[0m  [2m1[0m â”‚ pub fn naked<T>() -> T {
  [31mâ”‚[0m    Â· [35;1m                     â”¬[0m
  [31mâ”‚[0m    Â·                      [35;1mâ•°â”€â”€ [35;1mThe invalid output type[0m[0m
  [31mâ”‚[0m  [2m2[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mCan you return a concrete type as output?
  [31mâ”‚[0m         Or wrap the generic parameter in a non-generic container? For
  [31mâ”‚[0m         example, `T` in `Vec<T>` is not considered to be a naked parameter.

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't return a naked generic parameter from a constructor, like `T` in
  [31mâ”‚[0m `app::fallible_naked`.
  [31mâ”‚[0m I don't take into account trait bounds when building your dependency
  [31mâ”‚[0m graph. A constructor that returns a naked generic parameter is equivalent,
  [31mâ”‚[0m in my eyes, to a constructor that can build **any** type, which is
  [31mâ”‚[0m unlikely to be what you want!
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:23:1]
  [31mâ”‚[0m  [2m23[0m â”‚     bp.constructor(f!(crate::naked), Lifecycle::RequestScoped);
  [31mâ”‚[0m  [2m24[0m â”‚     bp.constructor(f!(crate::fallible_naked), Lifecycle::RequestScoped)
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                [35;1mâ•°â”€â”€ [35;1mThe constructor was registered here[0m[0m
  [31mâ”‚[0m  [2m25[0m â”‚         .error_handler(f!(crate::error_handler));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4msrc/lib.rs[0m:1:1]
  [31mâ”‚[0m  [2m1[0m â”‚ pub fn fallible_naked<T>() -> Result<T, FallibleError> {
  [31mâ”‚[0m    Â· [35;1m                              â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m    Â·                                           [35;1mâ•°â”€â”€ [35;1mThe invalid output type[0m[0m
  [31mâ”‚[0m  [2m2[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mCan you return a concrete type as output?
  [31mâ”‚[0m         Or wrap the generic parameter in a non-generic container? For
  [31mâ”‚[0m         example, `T` in `Vec<T>` is not considered to be a naked parameter.