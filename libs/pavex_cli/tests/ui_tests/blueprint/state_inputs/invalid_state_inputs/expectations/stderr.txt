[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Types that are used as inputs to build the application state can't have
  [31mâ”‚[0m non-'static lifetime parameters.
  [31mâ”‚[0m `app::A` has a named lifetime parameter, `'a`, that you haven't
  [31mâ”‚[0m constrained to be 'static.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:28:1]
  [31mâ”‚[0m  [2m28[0m â”‚     let mut bp = Blueprint::new();
  [31mâ”‚[0m  [2m29[0m â”‚     bp.state_input(f!(crate::A));
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The state input was registered here[0m
  [31mâ”‚[0m  [2m30[0m â”‚     bp.state_input(f!(crate::B));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mSet the lifetime parameters to `'static` when registering the type
  [31mâ”‚[0m         as a state input. E.g. `bp.state_input(f!(crate::MyType<'static>))`
  [31mâ”‚[0m         for `struct MyType<'a>(&'a str)`.

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Types that are used as inputs to build the application state can't have
  [31mâ”‚[0m unassigned generic type parameters.
  [31mâ”‚[0m `app::B` has a generic type parameter, `T`, that you haven't assigned a
  [31mâ”‚[0m concrete type to.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:29:1]
  [31mâ”‚[0m  [2m29[0m â”‚     bp.state_input(f!(crate::A));
  [31mâ”‚[0m  [2m30[0m â”‚     bp.state_input(f!(crate::B));
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The state input was registered here[0m
  [31mâ”‚[0m  [2m31[0m â”‚     bp.state_input(f!(crate::C));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mSet the generic parameters to concrete types when registering
  [31mâ”‚[0m         the type as a state input. E.g. `bp.state_input(f!
  [31mâ”‚[0m         (crate::MyType<std::string::String>))` for `struct MyType<T>(T)`.

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Types that are used as inputs to build the application state can't have
  [31mâ”‚[0m non-'static lifetime parameters.
  [31mâ”‚[0m `app::C` has 3 named lifetime parameters that you haven't constrained to
  [31mâ”‚[0m be 'static: `'a`, `'b` and `'c`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:30:1]
  [31mâ”‚[0m  [2m30[0m â”‚     bp.state_input(f!(crate::B));
  [31mâ”‚[0m  [2m31[0m â”‚     bp.state_input(f!(crate::C));
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The state input was registered here[0m
  [31mâ”‚[0m  [2m32[0m â”‚     bp.state_input(f!(crate::D));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mSet the lifetime parameters to `'static` when registering the type
  [31mâ”‚[0m         as a state input. E.g. `bp.state_input(f!(crate::MyType<'static>))`
  [31mâ”‚[0m         for `struct MyType<'a>(&'a str)`.

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Types that are used as inputs to build the application state can't have
  [31mâ”‚[0m unassigned generic type parameters.
  [31mâ”‚[0m `app::D` has 3 generic type parameters that you haven't assigned concrete
  [31mâ”‚[0m types to: `T`, `S` and `Z`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:31:1]
  [31mâ”‚[0m  [2m31[0m â”‚     bp.state_input(f!(crate::C));
  [31mâ”‚[0m  [2m32[0m â”‚     bp.state_input(f!(crate::D));
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The state input was registered here[0m
  [31mâ”‚[0m  [2m33[0m â”‚     bp.route(GET, "/", f!(crate::handler));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mSet the generic parameters to concrete types when registering
  [31mâ”‚[0m         the type as a state input. E.g. `bp.state_input(f!
  [31mâ”‚[0m         (crate::MyType<std::string::String>))` for `struct MyType<T>(T)`.