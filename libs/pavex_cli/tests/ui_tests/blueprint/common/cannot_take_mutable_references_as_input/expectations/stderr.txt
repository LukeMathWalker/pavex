[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't inject a mutable reference as an input parameter to
  [31mâ”‚[0m `app::observer`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:33:1]
  [31mâ”‚[0m  [2m33[0m â”‚     bp.wrap(f!(crate::wrapping));
  [31mâ”‚[0m  [2m34[0m â”‚     bp.error_observer(f!(crate::observer));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                [35;1mâ•°â”€â”€ The error observer was registered here[0m
  [31mâ”‚[0m  [2m35[0m â”‚     bp.route(GET, "/home", f!(crate::handler))
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:21:1]
  [31mâ”‚[0m  [2m21[0m â”‚ 
  [31mâ”‚[0m  [2m22[0m â”‚ pub fn observer(e: &pavex::Error, s: &mut String) {
  [31mâ”‚[0m     Â· [35;1m                                  â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                          [35;1mâ•°â”€â”€ The &mut input[0m
  [31mâ”‚[0m  [2m23[0m â”‚     todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mInjected inputs can only be taken by value or via a shared reference
  [31mâ”‚[0m         (`&`). If you absolutely need to mutate the input, consider internal
  [31mâ”‚[0m         mutability (e.g. `RefCell`).

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't inject a mutable reference as an input parameter to
  [31mâ”‚[0m `app::constructor`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:31:1]
  [31mâ”‚[0m  [2m31[0m â”‚     let mut bp = Blueprint::new();
  [31mâ”‚[0m  [2m32[0m â”‚     bp.constructor(f!(crate::constructor), Lifecycle::RequestScoped);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                               [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m  [2m33[0m â”‚     bp.wrap(f!(crate::wrapping));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4msrc/lib.rs[0m:6:1]
  [31mâ”‚[0m  [2m6[0m â”‚ 
  [31mâ”‚[0m  [2m7[0m â”‚ pub fn constructor(r: &mut RequestHead) -> String {
  [31mâ”‚[0m    Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m    Â·                             [35;1mâ•°â”€â”€ The &mut input[0m
  [31mâ”‚[0m  [2m8[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mInjected inputs can only be taken by value or via a shared reference
  [31mâ”‚[0m         (`&`). If you absolutely need to mutate the input, consider internal
  [31mâ”‚[0m         mutability (e.g. `RefCell`).

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't inject a mutable reference as an input parameter to
  [31mâ”‚[0m `app::wrapping`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:32:1]
  [31mâ”‚[0m  [2m32[0m â”‚     bp.constructor(f!(crate::constructor), Lifecycle::RequestScoped);
  [31mâ”‚[0m  [2m33[0m â”‚     bp.wrap(f!(crate::wrapping));
  [31mâ”‚[0m     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                      [35;1mâ•°â”€â”€ The wrapping middleware was registered here[0m
  [31mâ”‚[0m  [2m34[0m â”‚     bp.error_observer(f!(crate::observer));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:14:1]
  [31mâ”‚[0m  [2m14[0m â”‚ 
  [31mâ”‚[0m  [2m15[0m â”‚ pub fn wrapping<C>(next: Next<C>, s: &mut String) -> Response
  [31mâ”‚[0m     Â· [35;1m                                  â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                          [35;1mâ•°â”€â”€ The &mut input[0m
  [31mâ”‚[0m  [2m16[0m â”‚ where
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mInjected inputs can only be taken by value or via a shared reference
  [31mâ”‚[0m         (`&`). If you absolutely need to mutate the input, consider internal
  [31mâ”‚[0m         mutability (e.g. `RefCell`).

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m You can't inject a mutable reference as an input parameter to
  [31mâ”‚[0m `app::error_handler`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:35:1]
  [31mâ”‚[0m  [2m35[0m â”‚     bp.route(GET, "/home", f!(crate::handler))
  [31mâ”‚[0m  [2m36[0m â”‚         .error_handler(f!(crate::error_handler));
  [31mâ”‚[0m     Â· [35;1m                       â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mThe error handler was registered here[0m
  [31mâ”‚[0m  [2m37[0m â”‚     bp
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:10:1]
  [31mâ”‚[0m  [2m10[0m â”‚ 
  [31mâ”‚[0m  [2m11[0m â”‚ pub fn error_handler(e: &pavex::Error, s: &mut String) -> Response {
  [31mâ”‚[0m     Â· [35;1m                                       â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                               [35;1mâ•°â”€â”€ The &mut input[0m
  [31mâ”‚[0m  [2m12[0m â”‚     todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mInjected inputs can only be taken by value or via a shared reference
  [31mâ”‚[0m         (`&`). If you absolutely need to mutate the input, consider internal
  [31mâ”‚[0m         mutability (e.g. `RefCell`).