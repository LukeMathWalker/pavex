[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Route parameters must be extracted using a struct with named fields, where
  [31mâ”‚[0m the name of each field is matches one of the route parameters specified in
  [31mâ”‚[0m the route for the respective request handler.
  [31mâ”‚[0m `app::primitive` is trying to extract `RouteParams<u32>`, but `u32` is a
  [31mâ”‚[0m primitive, not a struct type. I don't support this: the extraction would
  [31mâ”‚[0m fail at runtime, when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:33:1]
  [31mâ”‚[0m  [2m33[0m â”‚     ));
  [31mâ”‚[0m  [2m34[0m â”‚     bp.route(GET, "a/:x", f!(crate::primitive));
  [31mâ”‚[0m     Â· [35;1m                          â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ•°â”€â”€ [35;1mThe request handler asking for `RouteParams<u32>`[0m[0m
  [31mâ”‚[0m  [2m35[0m â”‚     bp.route(GET, "b/:x/:y", f!(crate::tuple));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mUse a struct type to extract route parameters.
  [31mâ”‚[0m         Check out `RouteParams`' documentation for all the details!

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Route parameters must be extracted using a struct with named fields, where
  [31mâ”‚[0m the name of each field is matches one of the route parameters specified in
  [31mâ”‚[0m the route for the respective request handler.
  [31mâ”‚[0m `app::tuple` is trying to extract `RouteParams<(u32, u32)>`, but `(u32,
  [31mâ”‚[0m u32)` is a tuple, not a struct type. I don't support this: the extraction
  [31mâ”‚[0m would fail at runtime, when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:34:1]
  [31mâ”‚[0m  [2m34[0m â”‚     bp.route(GET, "a/:x", f!(crate::primitive));
  [31mâ”‚[0m  [2m35[0m â”‚     bp.route(GET, "b/:x/:y", f!(crate::tuple));
  [31mâ”‚[0m     Â· [35;1m                             â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                      [35;1mâ•°â”€â”€ [35;1mThe request handler asking for `RouteParams<(u32, u32)>`[0m[0m
  [31mâ”‚[0m  [2m36[0m â”‚     bp.route(GET, "c/:x/:z", f!(crate::slice_ref));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mUse a struct type to extract route parameters.
  [31mâ”‚[0m         Check out `RouteParams`' documentation for all the details!

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Route parameters must be extracted using a struct with named fields, where
  [31mâ”‚[0m the name of each field is matches one of the route parameters specified in
  [31mâ”‚[0m the route for the respective request handler.
  [31mâ”‚[0m `app::slice_ref` is trying to extract `RouteParams<&[u32]>`, but `&[u32]`
  [31mâ”‚[0m is a reference, not a struct type. I don't support this: the extraction
  [31mâ”‚[0m would fail at runtime, when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:35:1]
  [31mâ”‚[0m  [2m35[0m â”‚     bp.route(GET, "b/:x/:y", f!(crate::tuple));
  [31mâ”‚[0m  [2m36[0m â”‚     bp.route(GET, "c/:x/:z", f!(crate::slice_ref));
  [31mâ”‚[0m     Â· [35;1m                             â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                        [35;1mâ•°â”€â”€ [35;1mThe request handler asking for `RouteParams<&[u32]>`[0m[0m
  [31mâ”‚[0m  [2m37[0m â”‚     bp.route(GET, "d/:x/:y", f!(crate::reference::<crate::MyStruct>));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mUse a struct type to extract route parameters.
  [31mâ”‚[0m         Check out `RouteParams`' documentation for all the details!

[31m[1mERROR[0m[39m: 
  [31mÃ—[0m Route parameters must be extracted using a struct with named fields, where
  [31mâ”‚[0m the name of each field is matches one of the route parameters specified in
  [31mâ”‚[0m the route for the respective request handler.
  [31mâ”‚[0m `app::reference::< crate::MyStruct >` is trying to extract
  [31mâ”‚[0m `RouteParams<&app::MyStruct>`, but `&app::MyStruct` is a reference, not a
  [31mâ”‚[0m struct type. I don't support this: the extraction would fail at runtime,
  [31mâ”‚[0m when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4msrc/lib.rs[0m:36:1]
  [31mâ”‚[0m  [2m36[0m â”‚     bp.route(GET, "c/:x/:z", f!(crate::slice_ref));
  [31mâ”‚[0m  [2m37[0m â”‚     bp.route(GET, "d/:x/:y", f!(crate::reference::<crate::MyStruct>));
  [31mâ”‚[0m     Â· [35;1m                             â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                                 [35;1mâ•°â”€â”€ [35;1mThe request handler asking for `RouteParams<&app::MyStruct>`[0m[0m
  [31mâ”‚[0m  [2m38[0m â”‚     bp
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mUse a struct type to extract route parameters.
  [31mâ”‚[0m         Check out `RouteParams`' documentation for all the details!