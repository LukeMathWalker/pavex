[31;1mERROR[0m:
  [31mÃ—[0m `&app::B` can't be a singleton because its lifetime isn't
  [31mâ”‚[0m `'static`.
  [31mâ”‚[0m Singletons must be available for as long as the application is running,
  [31mâ”‚[0m therefore their lifetime must be `'static`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mdependency_injection/lifecycles/non_static_references_cannot_be_singletons/src/lib.rs[0m:14:1]
  [31mâ”‚[0m  [2m14[0m â”‚
  [31mâ”‚[0m  [2m15[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::singleton(id = "B_")]
  [31mâ”‚[0m  [2m16[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn b(_a: &A) -> &B {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe singleton was registered here[0m
  [31mâ”‚[0m  [2m17[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m If you are returning a reference to data that's owned by another
  [31mâ”‚[0m         singleton component, register the constructor as transient rather
  [31mâ”‚[0m         than singleton.