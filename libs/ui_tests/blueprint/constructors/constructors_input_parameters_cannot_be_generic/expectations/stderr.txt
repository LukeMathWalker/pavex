[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::once`, one of your constructors, breaks this rule: `T` is
  [31mâ”‚[0m only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:43:1]
  [31mâ”‚[0m  [2m43[0m â”‚     bp.import(from![crate::annotated]);
  [31mâ”‚[0m  [2m44[0m â”‚     bp.request_scoped(f!(crate::once));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                              [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m  [2m45[0m â”‚     bp.request_scoped(f!(crate::twice));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:5:1]
  [31mâ”‚[0m  [2m5[0m â”‚
  [31mâ”‚[0m  [2m6[0m â”‚ pub fn once<T>(_generic_input: Generic<T>) -> u8 {
  [31mâ”‚[0m    Â· [35;1m            â”¬[0m[33;1m                                 â”€â”¬[0m
  [31mâ”‚[0m    Â·             [35;1mâ”‚[0m  [33;1m..because it is not used here â”€â”€â•¯[0m
  [31mâ”‚[0m    Â·             [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m7[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mAssign concrete type(s) to the problematic generic parameter(s) when
  [31mâ”‚[0m         registering the constructor against the blueprint:
  [31mâ”‚[0m         |  bp.constructor(
  [31mâ”‚[0m         |    f!(my_crate::my_constructor::<ConcreteType>),
  [31mâ”‚[0m         |    ..
  [31mâ”‚[0m         |  )
[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::twice`, one of your constructors, breaks this rule: `T` and
  [31mâ”‚[0m `S` are only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:44:1]
  [31mâ”‚[0m  [2m44[0m â”‚     bp.request_scoped(f!(crate::once));
  [31mâ”‚[0m  [2m45[0m â”‚     bp.request_scoped(f!(crate::twice));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                               [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m  [2m46[0m â”‚     bp.request_scoped(f!(crate::thrice));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:9:1]
  [31mâ”‚[0m  [2m 9[0m â”‚
  [31mâ”‚[0m  [2m10[0m â”‚ pub fn twice<T, S>(_i1: Generic<T>, _i2: Generic<S>) -> u16 {
  [31mâ”‚[0m     Â· [35;1m             â”¬[0m[33;1m  â”¬[0m[32;1m                                       â”€â”¬â”€[0m
  [31mâ”‚[0m     Â·              [35;1mâ”‚[0m  [33;1mâ”‚[0m     [32;1m..because they are not used here â”€â”€â•¯[0m
  [31mâ”‚[0m     Â·              [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·              [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m11[0m â”‚     todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mAssign concrete type(s) to the problematic generic parameter(s) when
  [31mâ”‚[0m         registering the constructor against the blueprint:
  [31mâ”‚[0m         |  bp.constructor(
  [31mâ”‚[0m         |    f!(my_crate::my_constructor::<ConcreteType>),
  [31mâ”‚[0m         |    ..
  [31mâ”‚[0m         |  )
[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::thrice`, one of your constructors, breaks this rule: `T`,
  [31mâ”‚[0m `S` and `U` are only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:45:1]
  [31mâ”‚[0m  [2m45[0m â”‚     bp.request_scoped(f!(crate::twice));
  [31mâ”‚[0m  [2m46[0m â”‚     bp.request_scoped(f!(crate::thrice));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                               [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m  [2m47[0m â”‚     bp.route(GET, "/", f!(crate::handler));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:13:1]
  [31mâ”‚[0m  [2m13[0m â”‚
  [31mâ”‚[0m  [2m14[0m â”‚ pub fn thrice<T, S, U>(_i1: Generic<T>, _i2: Generic<S>, _i3: Generic<U>) -> u32 {
  [31mâ”‚[0m     Â· [35;1m              â”¬[0m[33;1m  â”¬[0m[32;1m  â”¬[0m[35;1m                                                        â”€â”¬â”€[0m
  [31mâ”‚[0m     Â·               [35;1mâ”‚[0m  [33;1mâ”‚[0m  [32;1mâ”‚[0m                      [35;1m..because they are not used here â”€â”€â•¯[0m
  [31mâ”‚[0m     Â·               [35;1mâ”‚[0m  [33;1mâ”‚[0m  [32;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·               [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·               [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m15[0m â”‚     todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mAssign concrete type(s) to the problematic generic parameter(s) when
  [31mâ”‚[0m         registering the constructor against the blueprint:
  [31mâ”‚[0m         |  bp.constructor(
  [31mâ”‚[0m         |    f!(my_crate::my_constructor::<ConcreteType>),
  [31mâ”‚[0m         |    ..
  [31mâ”‚[0m         |  )
[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::annotated::thrice`, one of your constructors, breaks this
  [31mâ”‚[0m rule: `T`, `S` and `U` are only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:30:1]
  [31mâ”‚[0m  [2m30[0m â”‚
  [31mâ”‚[0m  [2m31[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m     #[pavex::singleton]
  [31mâ”‚[0m  [2m32[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m     pub fn thrice<T, S, U>(_i1: Generic<T>, _i2: Generic<S>, _i3: Generic<U>) -> bool {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m33[0m â”‚             todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:31:1]
  [31mâ”‚[0m  [2m31[0m â”‚     #[pavex::singleton]
  [31mâ”‚[0m  [2m32[0m â”‚     pub fn thrice<T, S, U>(_i1: Generic<T>, _i2: Generic<S>, _i3: Generic<U>) -> bool {
  [31mâ”‚[0m     Â· [35;1m                  â”¬[0m[33;1m  â”¬[0m[32;1m  â”¬[0m[35;1m                                                        â”€â”€â”¬â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mâ”‚[0m  [33;1mâ”‚[0m  [32;1mâ”‚[0m                       [35;1m..because they are not used here â”€â”€â•¯[0m
  [31mâ”‚[0m     Â·                   [35;1mâ”‚[0m  [33;1mâ”‚[0m  [32;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                   [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                   [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m33[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mCan you restructure your constructor to remove those generic
  [31mâ”‚[0m         parameters from its signature?
[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::annotated::twice`, one of your constructors, breaks this
  [31mâ”‚[0m rule: `T` and `S` are only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:25:1]
  [31mâ”‚[0m  [2m25[0m â”‚
  [31mâ”‚[0m  [2m26[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m     #[pavex::transient]
  [31mâ”‚[0m  [2m27[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m     pub fn twice<T, S>(_i1: Generic<T>, _i2: Generic<S>) -> u128 {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m28[0m â”‚             todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:26:1]
  [31mâ”‚[0m  [2m26[0m â”‚     #[pavex::transient]
  [31mâ”‚[0m  [2m27[0m â”‚     pub fn twice<T, S>(_i1: Generic<T>, _i2: Generic<S>) -> u128 {
  [31mâ”‚[0m     Â· [35;1m                 â”¬[0m[33;1m  â”¬[0m[32;1m                                       â”€â”€â”¬â”€[0m
  [31mâ”‚[0m     Â·                  [35;1mâ”‚[0m  [33;1mâ”‚[0m      [32;1m..because they are not used here â”€â”€â•¯[0m
  [31mâ”‚[0m     Â·                  [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                  [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m28[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mCan you restructure your constructor to remove those generic
  [31mâ”‚[0m         parameters from its signature?
[31;1mERROR[0m:
  [31mÃ—[0m All unassigned generic parameters must be used by the output type.
  [31mâ”‚[0m `app::annotated::once`, one of your constructors, breaks this
  [31mâ”‚[0m rule: `T` is only used by its input parameters.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:20:1]
  [31mâ”‚[0m  [2m20[0m â”‚
  [31mâ”‚[0m  [2m21[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m     #[pavex::request_scoped]
  [31mâ”‚[0m  [2m22[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m     pub fn once<T>(_generic_input: Generic<T>) -> u64 {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m23[0m â”‚             todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/constructors_input_parameters_cannot_be_generic/src/lib.rs[0m:21:1]
  [31mâ”‚[0m  [2m21[0m â”‚     #[pavex::request_scoped]
  [31mâ”‚[0m  [2m22[0m â”‚     pub fn once<T>(_generic_input: Generic<T>) -> u64 {
  [31mâ”‚[0m     Â· [35;1m                â”¬[0m[33;1m                                 â”€â”¬â”€[0m
  [31mâ”‚[0m     Â·                 [35;1mâ”‚[0m  [33;1m..because it is not used here â”€â”€â•¯[0m
  [31mâ”‚[0m     Â·                 [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m23[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m [36m  help: [0mCan you restructure your constructor to remove those generic
  [31mâ”‚[0m         parameters from its signature?