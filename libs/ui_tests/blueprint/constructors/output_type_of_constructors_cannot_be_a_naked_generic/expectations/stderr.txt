[31;1mERROR[0m:
  [31mÃ—[0m You can't return a naked generic parameter from a constructor, like `T` in
  [31mâ”‚[0m `app::naked`.
  [31mâ”‚[0m I don't take into account trait bounds when building your dependency
  [31mâ”‚[0m graph. A constructor that returns a naked generic parameter is equivalent,
  [31mâ”‚[0m in my eyes, to a constructor that can build **any** type, which is
  [31mâ”‚[0m unlikely to be what you want!
  [31mâ”‚[0m
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/constructors/output_type_of_constructors_cannot_be_a_naked_generic/src/lib.rs[0m:2:1]
  [31mâ”‚[0m  [2m2[0m â”‚
  [31mâ”‚[0m  [2m3[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m4[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn naked<T>() -> T {
  [31mâ”‚[0m    Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m5[0m â”‚         todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/constructors/output_type_of_constructors_cannot_be_a_naked_generic/src/lib.rs[0m:1:1]
  [31mâ”‚[0m  [2m1[0m â”‚ pub fn naked<T>() -> T {
  [31mâ”‚[0m    Â· [35;1m                     â”¬[0m
  [31mâ”‚[0m    Â·                      [35;1mâ•°â”€â”€ The invalid output type[0m
  [31mâ”‚[0m  [2m2[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Can you return a concrete type as output?
  [31mâ”‚[0m         Or wrap the generic parameter in a non-generic container? For example,
  [31mâ”‚[0m         `T` in `Vec<T>` is not considered to be a naked parameter.
[31;1mERROR[0m:
  [31mÃ—[0m You can't return a naked generic parameter from a constructor, like `T` in
  [31mâ”‚[0m `app::fallible_naked`.
  [31mâ”‚[0m I don't take into account trait bounds when building your dependency
  [31mâ”‚[0m graph. A constructor that returns a naked generic parameter is equivalent,
  [31mâ”‚[0m in my eyes, to a constructor that can build **any** type, which is
  [31mâ”‚[0m unlikely to be what you want!
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/constructors/output_type_of_constructors_cannot_be_a_naked_generic/src/lib.rs[0m:7:1]
  [31mâ”‚[0m  [2m 7[0m â”‚
  [31mâ”‚[0m  [2m 8[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m 9[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_naked<T>() -> Result<T, FallibleError> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m10[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/constructors/output_type_of_constructors_cannot_be_a_naked_generic/src/lib.rs[0m:1:1]
  [31mâ”‚[0m  [2m1[0m â”‚ pub fn fallible_naked<T>() -> Result<T, FallibleError> {
  [31mâ”‚[0m    Â· [35;1m                              â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m    Â·                                           [35;1mâ•°â”€â”€ The invalid output type[0m
  [31mâ”‚[0m  [2m2[0m â”‚     todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Can you return a concrete type as output?
  [31mâ”‚[0m         Or wrap the generic parameter in a non-generic container? For example,
  [31mâ”‚[0m         `T` in `Vec<T>` is not considered to be a naked parameter.