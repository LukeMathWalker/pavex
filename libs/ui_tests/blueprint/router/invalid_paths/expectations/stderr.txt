[31;1mERROR[0m:
  [31mÃ—[0m You can only register one path parameter for each path segment.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:43:1]
  [31mâ”‚[0m  [2m43[0m â”‚         let mut bp = Blueprint::new();
  [31mâ”‚[0m  [2m44[0m â”‚         bp.route(ANY, "/{too}{many}{params}", f!(crate::handler));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                  [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m45[0m â”‚         bp.route(GET, "/{*invalid_catch_all}/hey", f!(crate::handler));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use catch-all parameters at the end of a route path.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:44:1]
  [31mâ”‚[0m  [2m44[0m â”‚         bp.route(ANY, "/{too}{many}{params}", f!(crate::handler));
  [31mâ”‚[0m  [2m45[0m â”‚         bp.route(GET, "/{*invalid_catch_all}/hey", f!(crate::handler));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                    [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m46[0m â”‚         bp.route(GET, "/home/{id}", f!(crate::handler));
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m This route path, `/bp/home/{home_id}`, conflicts with the path of another
  [31mâ”‚[0m route you already registered, `/bp/home/{id}`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:47:1]
  [31mâ”‚[0m  [2m47[0m â”‚         // Route conflict with the previous one
  [31mâ”‚[0m  [2m48[0m â”‚         bp.route(GET, "/home/{home_id}", f!(crate::handler));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                               [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m49[0m â”‚         // Unnamed parameter
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use path parameters in the form of `{name}` or `{*name}`. You
  [31mâ”‚[0m can use `{{` and `}}` if you need to escape curly braces.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:49:1]
  [31mâ”‚[0m  [2m49[0m â”‚         // Unnamed parameter
  [31mâ”‚[0m  [2m50[0m â”‚         bp.route(GET, "/room/{}", f!(crate::handler));
  [31mâ”‚[0m     Â· [35;1m                      â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                            [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m51[0m â”‚         bp
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only register one path parameter for each path segment.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:12:1]
  [31mâ”‚[0m  [2m12[0m â”‚
  [31mâ”‚[0m  [2m13[0m â”‚ #[pavex::get(path = "/{how}{many}{params}{can}{i}{chain}")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                       [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m14[0m â”‚ pub fn too_many_params() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use catch-all parameters at the end of a route path.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:17:1]
  [31mâ”‚[0m  [2m17[0m â”‚
  [31mâ”‚[0m  [2m18[0m â”‚ #[pavex::get(path = "/{*invalid_catch_all}/hey")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                  [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m19[0m â”‚ pub fn invalid_catch_all() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m This route path, `/room/{room_id}`, conflicts with the path of another
  [31mâ”‚[0m route you already registered, `/room/{id}`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:27:1]
  [31mâ”‚[0m  [2m27[0m â”‚
  [31mâ”‚[0m  [2m28[0m â”‚ #[pavex::get(path = "/room/{room_id}")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                             [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m29[0m â”‚ pub fn conflicting_room_id() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use path parameters in the form of `{name}` or `{*name}`. You
  [31mâ”‚[0m can use `{{` and `}}` if you need to escape curly braces.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:32:1]
  [31mâ”‚[0m  [2m32[0m â”‚
  [31mâ”‚[0m  [2m33[0m â”‚ #[pavex::get(path = "/room/{}")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m34[0m â”‚ pub fn unnamed() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€