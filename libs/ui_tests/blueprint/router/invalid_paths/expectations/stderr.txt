[31;1mERROR[0m:
  [31mÃ—[0m You can only register one path parameter for each path segment.
  [31mâ”‚[0m
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:3:1]
  [31mâ”‚[0m  [2m3[0m â”‚
  [31mâ”‚[0m  [2m4[0m â”‚ #[pavex::get(path = "/{how}{many}{params}{can}{i}{chain}")]
  [31mâ”‚[0m    Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m    Â·                                       [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m5[0m â”‚ pub fn too_many_params() -> Response {
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use catch-all parameters at the end of a route path.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:8:1]
  [31mâ”‚[0m  [2m 8[0m â”‚
  [31mâ”‚[0m  [2m 9[0m â”‚ #[pavex::get(path = "/{*invalid_catch_all}/hey")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                  [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m10[0m â”‚ pub fn invalid_catch_all() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m This route path, `/room/{room_id}`, conflicts with the path of another
  [31mâ”‚[0m route you already registered, `/room/{id}`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:18:1]
  [31mâ”‚[0m  [2m18[0m â”‚
  [31mâ”‚[0m  [2m19[0m â”‚ #[pavex::get(path = "/room/{room_id}")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                             [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m20[0m â”‚ pub fn conflicting_room_id() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You can only use path parameters in the form of `{name}` or `{*name}`. You
  [31mâ”‚[0m can use `{{` and `}}` if you need to escape curly braces.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/router/invalid_paths/src/lib.rs[0m:23:1]
  [31mâ”‚[0m  [2m23[0m â”‚
  [31mâ”‚[0m  [2m24[0m â”‚ #[pavex::get(path = "/room/{}")]
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                          [35;1mâ•°â”€â”€ The problematic path[0m
  [31mâ”‚[0m  [2m25[0m â”‚ pub fn unnamed() -> Response {
  [31mâ”‚[0m     â•°â”€â”€â”€â”€