[31;1mERROR[0m:
  [31mÃ—[0m I am not smart enough to figure out the concrete type for all the generic
  [31mâ”‚[0m parameters in `app::generic_error_handler`.
  [31mâ”‚[0m I can only infer the type of an unassigned generic parameter if it appears
  [31mâ”‚[0m in the error type processed by this error handler. This is not the case
  [31mâ”‚[0m for `T`, since it isn't used by the error type.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:63:1]
  [31mâ”‚[0m  [2m63[0m â”‚     bp.constructor(CONSTRUCTOR_1)
  [31mâ”‚[0m  [2m64[0m â”‚         .error_handler(GENERIC_ERROR_HANDLER);
  [31mâ”‚[0m     Â· [35;1m                       â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                                  [35;1mâ•°â”€â”€ The error handler was registered here[0m
  [31mâ”‚[0m  [2m65[0m â”‚     bp.constructor(CONSTRUCTOR_2)
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:28:1]
  [31mâ”‚[0m  [2m28[0m â”‚ #[pavex::error_handler(default = false)]
  [31mâ”‚[0m  [2m29[0m â”‚ pub fn generic_error_handler<T>(
  [31mâ”‚[0m     Â· [35;1m                             â”¬[0m
  [31mâ”‚[0m     Â·                              [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m30[0m â”‚     #[px(error_ref)] _error: &Error,
  [31mâ”‚[0m     Â· [33;1m    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                    [33;1mâ•°â”€â”€ ..because it is not used here[0m
  [31mâ”‚[0m  [2m31[0m â”‚     _generic_input: GenericType<T>,
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Specify the concrete type(s) for the problematic generic parameter(s)
  [31mâ”‚[0m         when registering the error handler against the blueprint:
  [31mâ”‚[0m         |  .error_handler(
  [31mâ”‚[0m         |    f!(my_crate::my_error_handler::<ConcreteType>)
  [31mâ”‚[0m         |  )
[31;1mERROR[0m:
  [31mÃ—[0m I am not smart enough to figure out the concrete type for all the generic
  [31mâ”‚[0m parameters in `app::doubly_generic_error_handler`.
  [31mâ”‚[0m I can only infer the type of an unassigned generic parameter if it appears
  [31mâ”‚[0m in the error type processed by this error handler. This is not the case
  [31mâ”‚[0m for `T` and `S`, since they aren't used by the error type.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:65:1]
  [31mâ”‚[0m  [2m65[0m â”‚     bp.constructor(CONSTRUCTOR_2)
  [31mâ”‚[0m  [2m66[0m â”‚         .error_handler(DOUBLY_GENERIC_ERROR_HANDLER);
  [31mâ”‚[0m     Â· [35;1m                       â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mThe error handler was registered here[0m
  [31mâ”‚[0m  [2m67[0m â”‚     bp.constructor(CONSTRUCTOR_3)
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:36:1]
  [31mâ”‚[0m  [2m36[0m â”‚ #[pavex::error_handler(default = false)]
  [31mâ”‚[0m  [2m37[0m â”‚ pub fn doubly_generic_error_handler<T, S>(
  [31mâ”‚[0m     Â· [35;1m                                    â”¬[0m[33;1m  â”¬[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m38[0m â”‚     #[px(error_ref)] _error: &Error,
  [31mâ”‚[0m     Â· [32;1m    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                    [32;1mâ•°â”€â”€ ..because they are not used here[0m
  [31mâ”‚[0m  [2m39[0m â”‚     _i1: GenericType<T>,
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Specify the concrete type(s) for the problematic generic parameter(s)
  [31mâ”‚[0m         when registering the error handler against the blueprint:
  [31mâ”‚[0m         |  .error_handler(
  [31mâ”‚[0m         |    f!(my_crate::my_error_handler::<ConcreteType>)
  [31mâ”‚[0m         |  )
[31;1mERROR[0m:
  [31mÃ—[0m I am not smart enough to figure out the concrete type for all the generic
  [31mâ”‚[0m parameters in `app::triply_generic_error_handler`.
  [31mâ”‚[0m I can only infer the type of an unassigned generic parameter if it appears
  [31mâ”‚[0m in the error type processed by this error handler. This is not the case
  [31mâ”‚[0m for `T`, `S` and `U`, since they aren't used by the error type.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:67:1]
  [31mâ”‚[0m  [2m67[0m â”‚     bp.constructor(CONSTRUCTOR_3)
  [31mâ”‚[0m  [2m68[0m â”‚         .error_handler(TRIPLY_GENERIC_ERROR_HANDLER);
  [31mâ”‚[0m     Â· [35;1m                       â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mThe error handler was registered here[0m
  [31mâ”‚[0m  [2m69[0m â”‚     bp.routes(from![crate]);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/error_handlers/generics_in_error_handlers_must_be_tied_to_the_error/src/lib.rs[0m:45:1]
  [31mâ”‚[0m  [2m45[0m â”‚ #[pavex::error_handler(default = false)]
  [31mâ”‚[0m  [2m46[0m â”‚ pub fn triply_generic_error_handler<T, S, U>(
  [31mâ”‚[0m     Â· [35;1m                                    â”¬[0m[33;1m  â”¬[0m[32;1m  â”¬[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ”‚[0m  [33;1mâ”‚[0m  [32;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ”‚[0m  [33;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m     Â·                                     [35;1mâ•°â”€â”€ I can't infer this..[0m
  [31mâ”‚[0m  [2m47[0m â”‚     #[px(error_ref)] _error: &Error,
  [31mâ”‚[0m     Â· [35;1m    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                    [35;1mâ•°â”€â”€ ..because they are not used here[0m
  [31mâ”‚[0m  [2m48[0m â”‚     _i1: GenericType<T>,
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Specify the concrete type(s) for the problematic generic parameter(s)
  [31mâ”‚[0m         when registering the error handler against the blueprint:
  [31mâ”‚[0m         |  .error_handler(
  [31mâ”‚[0m         |    f!(my_crate::my_error_handler::<ConcreteType>)
  [31mâ”‚[0m         |  )