[31;1mERROR[0m:
  [31mÃ—[0m All request handlers must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This request handler doesn't: it returns the unit type, `()`. I can't
  [31mâ”‚[0m convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:57:1]
  [31mâ”‚[0m  [2m57[0m â”‚
  [31mâ”‚[0m  [2m58[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/unit")]
  [31mâ”‚[0m  [2m59[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn unit_handler() {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler was registered here[0m
  [31mâ”‚[0m  [2m60[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All request handlers must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This request handler doesn't: it returns the unit type, `()`, when
  [31mâ”‚[0m successful. I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:62:1]
  [31mâ”‚[0m  [2m62[0m â”‚
  [31mâ”‚[0m  [2m63[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/fallible_unit")]
  [31mâ”‚[0m  [2m64[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_unit_handler() -> Result<(), Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler was registered here[0m
  [31mâ”‚[0m  [2m65[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Wrapping middlewares must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`. I can't convert
  [31mâ”‚[0m `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:74:1]
  [31mâ”‚[0m  [2m74[0m â”‚
  [31mâ”‚[0m  [2m75[0m â”‚     bp.wrap(UNIT_WRAPPING);
  [31mâ”‚[0m     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mâ•°â”€â”€ The wrapping middleware was registered here[0m
  [31mâ”‚[0m  [2m76[0m â”‚     bp.wrap(FALLIBLE_UNIT_WRAPPING);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Wrapping middlewares must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:75:1]
  [31mâ”‚[0m  [2m75[0m â”‚     bp.wrap(UNIT_WRAPPING);
  [31mâ”‚[0m  [2m76[0m â”‚     bp.wrap(FALLIBLE_UNIT_WRAPPING);
  [31mâ”‚[0m     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                        [35;1mâ•°â”€â”€ The wrapping middleware was registered here[0m
  [31mâ”‚[0m  [2m77[0m â”‚
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Pre-processing middlewares must return `pavex::middleware::Processing`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:71:1]
  [31mâ”‚[0m  [2m71[0m â”‚
  [31mâ”‚[0m  [2m72[0m â”‚     bp.pre_process(UNIT_PRE);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”¬â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe pre-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m73[0m â”‚     bp.pre_process(FALLIBLE_UNIT_PRE);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Pre-processing middlewares must return `pavex::middleware::Processing`
  [31mâ”‚[0m when successful.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:72:1]
  [31mâ”‚[0m  [2m72[0m â”‚     bp.pre_process(UNIT_PRE);
  [31mâ”‚[0m  [2m73[0m â”‚     bp.pre_process(FALLIBLE_UNIT_PRE);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe pre-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m74[0m â”‚
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Post-processing middlewares must return a type that can be converted into
  [31mâ”‚[0m a `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`. I can't convert
  [31mâ”‚[0m `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:77:1]
  [31mâ”‚[0m  [2m77[0m â”‚
  [31mâ”‚[0m  [2m78[0m â”‚     bp.post_process(UNIT_POST);
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe post-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m79[0m â”‚     bp.post_process(FALLIBLE_UNIT_POST);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Post-processing middlewares must return a type that can be converted into
  [31mâ”‚[0m a `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:78:1]
  [31mâ”‚[0m  [2m78[0m â”‚     bp.post_process(UNIT_POST);
  [31mâ”‚[0m  [2m79[0m â”‚     bp.post_process(FALLIBLE_UNIT_POST);
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe post-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m80[0m â”‚
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All constructors must return *something*.
  [31mâ”‚[0m This constructor doesn't: it returns the unit type, `()`.
  [31mâ”‚[0m
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:4:1]
  [31mâ”‚[0m  [2m4[0m â”‚
  [31mâ”‚[0m  [2m5[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::singleton]
  [31mâ”‚[0m  [2m6[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn constructor() {
  [31mâ”‚[0m    Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m7[0m â”‚         todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All fallible constructors must return *something* when successful.
  [31mâ”‚[0m This fallible constructor doesn't: it returns the unit type when
  [31mâ”‚[0m successful, `Ok(())`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:9:1]
  [31mâ”‚[0m  [2m 9[0m â”‚
  [31mâ”‚[0m  [2m10[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m11[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_unit_constructor() -> Result<(), Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m12[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m You registered a constructor that returns a `Result`, but you did not
  [31mâ”‚[0m register an error handler for it. If I don't have an error handler, I
  [31mâ”‚[0m don't know what to do with the error when the constructor fails!
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:14:1]
  [31mâ”‚[0m  [2m14[0m â”‚
  [31mâ”‚[0m  [2m15[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m16[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_constructor() -> Result<u64, Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe fallible constructor was registered here[0m
  [31mâ”‚[0m  [2m17[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Add an error handler via `.error_handler`