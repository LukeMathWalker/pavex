[31;1mERROR[0m:
  [31mÃ—[0m All request handlers must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This request handler doesn't: it returns the unit type, `()`. I can't
  [31mâ”‚[0m convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:77:1]
  [31mâ”‚[0m  [2m77[0m â”‚
  [31mâ”‚[0m  [2m78[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/unit")]
  [31mâ”‚[0m  [2m79[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn unit_handler() {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler was registered here[0m
  [31mâ”‚[0m  [2m80[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All request handlers must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This request handler doesn't: it returns the unit type, `()`, when
  [31mâ”‚[0m successful. I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:82:1]
  [31mâ”‚[0m  [2m82[0m â”‚
  [31mâ”‚[0m  [2m83[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/fallible_unit")]
  [31mâ”‚[0m  [2m84[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_unit_handler() -> Result<(), Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler was registered here[0m
  [31mâ”‚[0m  [2m85[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Wrapping middlewares must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`. I can't convert
  [31mâ”‚[0m `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:94:1]
  [31mâ”‚[0m  [2m94[0m â”‚
  [31mâ”‚[0m  [2m95[0m â”‚     bp.wrap(UNIT_WRAPPING);
  [31mâ”‚[0m     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                   [35;1mâ•°â”€â”€ The wrapping middleware was registered here[0m
  [31mâ”‚[0m  [2m96[0m â”‚     bp.wrap(FALLIBLE_UNIT_WRAPPING);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Wrapping middlewares must return a type that can be converted into a
  [31mâ”‚[0m `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:95:1]
  [31mâ”‚[0m  [2m95[0m â”‚     bp.wrap(UNIT_WRAPPING);
  [31mâ”‚[0m  [2m96[0m â”‚     bp.wrap(FALLIBLE_UNIT_WRAPPING);
  [31mâ”‚[0m     Â· [35;1m            â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                        [35;1mâ•°â”€â”€ The wrapping middleware was registered here[0m
  [31mâ”‚[0m  [2m97[0m â”‚
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Pre-processing middlewares must return `pavex::middleware::Processing`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:91:1]
  [31mâ”‚[0m  [2m91[0m â”‚
  [31mâ”‚[0m  [2m92[0m â”‚     bp.pre_process(UNIT_PRE);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”¬â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe pre-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m93[0m â”‚     bp.pre_process(FALLIBLE_UNIT_PRE);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Pre-processing middlewares must return `pavex::middleware::Processing`
  [31mâ”‚[0m when successful.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:92:1]
  [31mâ”‚[0m  [2m92[0m â”‚     bp.pre_process(UNIT_PRE);
  [31mâ”‚[0m  [2m93[0m â”‚     bp.pre_process(FALLIBLE_UNIT_PRE);
  [31mâ”‚[0m     Â· [35;1m                   â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe pre-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m94[0m â”‚
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Post-processing middlewares must return a type that can be converted into
  [31mâ”‚[0m a `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`. I can't convert
  [31mâ”‚[0m `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:97:1]
  [31mâ”‚[0m  [2m97[0m â”‚
  [31mâ”‚[0m  [2m98[0m â”‚     bp.post_process(UNIT_POST);
  [31mâ”‚[0m     Â· [35;1m                    â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·             [35;1mThe post-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m99[0m â”‚     bp.post_process(FALLIBLE_UNIT_POST);
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m Post-processing middlewares must return a type that can be converted into
  [31mâ”‚[0m a `pavex::response::Response`.
  [31mâ”‚[0m This middleware doesn't: it returns the unit type, `()`, when successful.
  [31mâ”‚[0m I can't convert `()` into an HTTP response.
  [31mâ”‚[0m
  [31mâ”‚[0m      â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:98:1]
  [31mâ”‚[0m  [2m 98[0m â”‚     bp.post_process(UNIT_POST);
  [31mâ”‚[0m  [2m 99[0m â”‚     bp.post_process(FALLIBLE_UNIT_POST);
  [31mâ”‚[0m      Â· [35;1m                    â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m      Â·            [35;1mThe post-processing middleware was registered here[0m
  [31mâ”‚[0m  [2m100[0m â”‚
  [31mâ”‚[0m      â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All constructors must return *something*.
  [31mâ”‚[0m This constructor doesn't: it returns the unit type, `()`.
  [31mâ”‚[0m
  [31mâ”‚[0m    â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:4:1]
  [31mâ”‚[0m  [2m4[0m â”‚
  [31mâ”‚[0m  [2m5[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::singleton]
  [31mâ”‚[0m  [2m6[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn annotated_constructor() {
  [31mâ”‚[0m    Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m7[0m â”‚         todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All fallible constructors must return *something* when successful.
  [31mâ”‚[0m This fallible constructor doesn't: it returns the unit type when
  [31mâ”‚[0m successful, `Ok(())`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:9:1]
  [31mâ”‚[0m  [2m 9[0m â”‚
  [31mâ”‚[0m  [2m10[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m11[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_annotated_unit_constructor() -> Result<(), Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m12[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All constructors must return *something*.
  [31mâ”‚[0m This constructor doesn't: it returns the unit type, `()`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:19:1]
  [31mâ”‚[0m  [2m19[0m â”‚
  [31mâ”‚[0m  [2m20[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::singleton]
  [31mâ”‚[0m  [2m21[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn constructor() {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m22[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All fallible constructors must return *something* when successful.
  [31mâ”‚[0m This fallible constructor doesn't: it returns the unit type when
  [31mâ”‚[0m successful, `Ok(())`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:32:1]
  [31mâ”‚[0m  [2m32[0m â”‚
  [31mâ”‚[0m  [2m33[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped]
  [31mâ”‚[0m  [2m34[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn fallible_unit_constructor() -> Result<(), Error> {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m  [2m35[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
[31;1mERROR[0m:
  [31mÃ—[0m All error handlers must return a type that implements
  [31mâ”‚[0m `pavex::response::IntoResponse`.
  [31mâ”‚[0m `app::error_handler` doesn't, it returns the unit type, `()`. I
  [31mâ”‚[0m can't convert `()` into an HTTP response!
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mblueprint/common/cannot_return_the_unit_type/src/lib.rs[0m:27:1]
  [31mâ”‚[0m  [2m27[0m â”‚
  [31mâ”‚[0m  [2m28[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::error_handler]
  [31mâ”‚[0m  [2m29[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn error_handler(_e: &Error) {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe error handler was registered here[0m
  [31mâ”‚[0m  [2m30[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€