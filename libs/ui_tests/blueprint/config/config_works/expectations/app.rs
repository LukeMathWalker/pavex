//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    pub a: app::A,
    pub a1: app::A1,
    #[serde(default)]
    pub b: app::B<alloc::string::String>,
    #[serde(default)]
    pub b1: app::B1,
    pub c: app::C,
    pub d: alloc::vec::Vec<alloc::string::String>,
    pub e: app::E,
    pub f: dep_29415e2f::F,
    pub g: dep_29415e2f::Z,
}
pub struct ApplicationState {
    pub a: app::A,
    pub a_1: app::A1,
    pub b: app::B<alloc::string::String>,
    pub b_1: app::B1,
    pub c: app::C,
    pub e: app::E,
    pub f: dep_29415e2f::F,
    pub vec: alloc::vec::Vec<alloc::string::String>,
    pub z: dep_29415e2f::Z,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(
            Self::_new(
                    app_config.g,
                    app_config.d,
                    app_config.f,
                    app_config.e,
                    app_config.c,
                    app_config.b1,
                    app_config.b,
                    app_config.a1,
                    app_config.a,
                )
                .await,
        )
    }
    async fn _new(
        v0: dep_29415e2f::Z,
        v1: alloc::vec::Vec<alloc::string::String>,
        v2: dep_29415e2f::F,
        v3: app::E,
        v4: app::C,
        v5: app::B1,
        v6: app::B<alloc::string::String>,
        v7: app::A1,
        v8: app::A,
    ) -> crate::ApplicationState {
        crate::ApplicationState {
            a: v8,
            a_1: v7,
            b: v6,
            b_1: v5,
            c: v4,
            e: v3,
            f: v2,
            vec: v1,
            z: v0,
        }
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    app_config: crate::ApplicationConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(app_config).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/", 0u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            return route_1::entrypoint(&allowed_methods).await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        route_0::entrypoint(
                                state.vec.clone(),
                                &state.a,
                                &state.b,
                                &state.a_1,
                                &state.b_1,
                                &state.c,
                                &state.e,
                                &state.f,
                                &state.z,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_1::entrypoint(&allowed_methods).await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>(
        s_0: alloc::vec::Vec<alloc::string::String>,
        s_1: &'a app::A,
        s_2: &'b app::B<alloc::string::String>,
        s_3: &'c app::A1,
        s_4: &'d app::B1,
        s_5: &'e app::C,
        s_6: &'f app::E,
        s_7: &'g dep_29415e2f::F,
        s_8: &'h dep_29415e2f::Z,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5, s_6, s_7, s_8).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>(
        s_0: alloc::vec::Vec<alloc::string::String>,
        s_1: &'a app::A,
        s_2: &'b app::B<alloc::string::String>,
        s_3: &'c app::A1,
        s_4: &'d app::B1,
        s_5: &'e app::C,
        s_6: &'f app::E,
        s_7: &'g dep_29415e2f::F,
        s_8: &'h dep_29415e2f::Z,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2, s_3, s_4, s_5, s_6, s_7, s_8).await;
        response
    }
    async fn wrapping_0(
        v0: alloc::vec::Vec<alloc::string::String>,
        v1: &app::A,
        v2: &app::B<alloc::string::String>,
        v3: &app::A1,
        v4: &app::B1,
        v5: &app::C,
        v6: &app::E,
        v7: &dep_29415e2f::F,
        v8: &dep_29415e2f::Z,
    ) -> pavex::response::Response {
        let v9 = crate::route_0::Next0 {
            s_0: v0,
            s_1: v1,
            s_2: v2,
            s_3: v3,
            s_4: v4,
            s_5: v5,
            s_6: v6,
            s_7: v7,
            s_8: v8,
            next: stage_1,
        };
        let v10 = pavex::middleware::Next::new(v9);
        let v11 = pavex::middleware::wrap_noop(v10).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v11)
    }
    async fn handler(
        v0: alloc::vec::Vec<alloc::string::String>,
        v1: &app::A,
        v2: &app::B<alloc::string::String>,
        v3: &app::A1,
        v4: &app::B1,
        v5: &app::C,
        v6: &app::E,
        v7: &dep_29415e2f::F,
        v8: &dep_29415e2f::Z,
    ) -> pavex::response::Response {
        let v9 = app::handler(v1, v2, v3, v4, v5, v0, v6, v7, v8);
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: alloc::vec::Vec<alloc::string::String>,
        s_1: &'a app::A,
        s_2: &'b app::B<alloc::string::String>,
        s_3: &'c app::A1,
        s_4: &'d app::B1,
        s_5: &'e app::C,
        s_6: &'f app::E,
        s_7: &'g dep_29415e2f::F,
        s_8: &'h dep_29415e2f::Z,
        next: fn(
            alloc::vec::Vec<alloc::string::String>,
            &'a app::A,
            &'b app::B<alloc::string::String>,
            &'c app::A1,
            &'d app::B1,
            &'e app::C,
            &'f app::E,
            &'g dep_29415e2f::F,
            &'h dep_29415e2f::Z,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, T> std::future::IntoFuture
    for Next0<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
                self.s_7,
                self.s_8,
            )
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = crate::route_1::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}