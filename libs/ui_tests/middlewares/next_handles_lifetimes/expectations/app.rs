//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    #[allow(dead_code)]
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {}
pub struct ApplicationState {}
impl ApplicationState {
    pub async fn new(
        _app_config: crate::ApplicationConfig,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new().await)
    }
    async fn _new() -> crate::ApplicationState {
        crate::ApplicationState {}
    }
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/home", 0u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            return route_0::entrypoint(&allowed_methods).await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_1::entrypoint().await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a pavex::router::AllowedMethods) -> pavex::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex::router::AllowedMethods) -> pavex::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = crate::route_0::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = app::c();
        let v2 = app::a();
        let v3 = app::b(&v2, &v1);
        let v4 = crate::route_0::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = app::mw(v5, v3);
        <pavex::Response as pavex::IntoResponse>::into_response(v6)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint() -> pavex::Response {
        let response = wrapping_0().await;
        response
    }
    async fn stage_1() -> pavex::Response {
        let response = wrapping_1().await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a app::A,
        s_1: &'b app::C,
    ) -> pavex::Response {
        let response = handler(s_0, s_1).await;
        response
    }
    async fn wrapping_0() -> pavex::Response {
        let v0 = crate::route_1::Next0 {
            next: stage_1,
        };
        let v1 = pavex::middleware::Next::new(v0);
        let v2 = pavex::middleware::wrap_noop(v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn wrapping_1() -> pavex::Response {
        let v0 = app::c();
        let v1 = app::a();
        let v2 = app::b(&v1, &v0);
        let v3 = crate::route_1::Next1 {
            s_0: &v1,
            s_1: &v0,
            next: stage_2,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = app::mw(v4, v2);
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn handler(v0: &app::A, v1: &app::C) -> pavex::Response {
        let v2 = app::handler(v0, v1);
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    struct Next0<T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        next: fn() -> T,
    }
    impl<T> std::future::IntoFuture for Next0<T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)()
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a app::A,
        s_1: &'b app::C,
        next: fn(&'a app::A, &'b app::C) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}