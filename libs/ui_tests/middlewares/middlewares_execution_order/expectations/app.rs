//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {}
pub struct ApplicationState {
    pub spy: app::Spy,
}
impl ApplicationState {
    pub async fn new(
        _app_config: crate::ApplicationConfig,
        v0: app::Spy,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(v0).await)
    }
    async fn _new(v0: app::Spy) -> crate::ApplicationState {
        crate::ApplicationState { spy: v0 }
    }
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/after_handler", 0u32).unwrap();
        router.insert("/early_return", 1u32).unwrap();
        router.insert("/failing_pre", 2u32).unwrap();
        router.insert("/nested", 3u32).unwrap();
        router.insert("/top_level", 4u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            return route_0::entrypoint(&allowed_methods).await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_4::entrypoint(&state.spy).await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_3::entrypoint(&state.spy).await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_2::entrypoint(&state.spy).await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            3u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_1::entrypoint(&state.spy).await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            4u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => route_5::entrypoint(&state.spy).await,
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = crate::route_0::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a>(
        s_0: &'a app::Spy,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_0(s_0).await.into_response() {
                break 'incoming response;
            }
            wrapping_2(s_0).await
        };
        let response = post_processing_1(response, s_0).await;
        response
    }
    async fn stage_3<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_1(s_0).await.into_response() {
                break 'incoming response;
            }
            handler(s_0).await
        };
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_1::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_1::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::first(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_0(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::first_pre(v0).await
    }
    async fn wrapping_2(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_1::Next2 {
            s_0: v0,
            next: stage_3,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::second(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_1(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::second_pre(v0).await
    }
    async fn handler(v0: &app::Spy) -> pavex::response::Response {
        let v1 = app::nested_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::second_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::first_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a>(
        s_0: &'a app::Spy,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_0(s_0).await.into_response() {
                break 'incoming response;
            }
            wrapping_2(s_0).await
        };
        let response = post_processing_1(response, s_0).await;
        response
    }
    async fn stage_3<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_1(s_0).await.into_response() {
                break 'incoming response;
            }
            handler(s_0).await
        };
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_2::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_2::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::first(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_0(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        let v1 = app::failing_pre_(v0).await;
        let v2 = match v1 {
            Ok(ok) => ok,
            Err(v2) => {
                return {
                    let v3 = app::e500(&v2);
                    let v4 = <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v3,
                    );
                    pavex::middleware::Processing::EarlyReturn(v4)
                };
            }
        };
        v2
    }
    async fn wrapping_2(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_2::Next2 {
            s_0: v0,
            next: stage_3,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::second(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_1(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::second_pre(v0).await
    }
    async fn handler(v0: &app::Spy) -> pavex::response::Response {
        let v1 = app::failing_pre_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::second_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::first_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a>(
        s_0: &'a app::Spy,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_0(s_0).await.into_response() {
                break 'incoming response;
            }
            wrapping_2(s_0).await
        };
        let response = post_processing_1(response, s_0).await;
        response
    }
    async fn stage_3<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_1(s_0).await.into_response() {
                break 'incoming response;
            }
            handler(s_0).await
        };
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_3::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_3::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::first(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_0(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::early_return_pre(v0).await
    }
    async fn wrapping_2(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_3::Next2 {
            s_0: v0,
            next: stage_3,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::second(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_1(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::second_pre(v0).await
    }
    async fn handler(v0: &app::Spy) -> pavex::response::Response {
        let v1 = app::early_return_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::second_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::first_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a>(
        s_0: &'a app::Spy,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_0(s_0).await.into_response() {
                break 'incoming response;
            }
            handler(s_0).await
        };
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_4::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_4::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::first(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_0(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::first_pre(v0).await
    }
    async fn handler(v0: &app::Spy) -> pavex::response::Response {
        let v1 = app::after_handler_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::first_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_5 {
    pub async fn entrypoint<'a>(
        s_0: &'a app::Spy,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_1(s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = wrapping_2(s_0).await;
        response
    }
    async fn stage_3<'a>(s_0: &'a app::Spy) -> pavex::response::Response {
        let response = 'incoming: {
            if let Some(response) = pre_processing_0(s_0).await.into_response() {
                break 'incoming response;
            }
            if let Some(response) = pre_processing_1(s_0).await.into_response() {
                break 'incoming response;
            }
            handler(s_0).await
        };
        let response = post_processing_0(response, s_0).await;
        let response = post_processing_1(response, s_0).await;
        response
    }
    async fn wrapping_0(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_5::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_1(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_5::Next1 {
            s_0: v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::first(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn wrapping_2(v0: &app::Spy) -> pavex::response::Response {
        let v1 = crate::route_5::Next2 {
            s_0: v0,
            next: stage_3,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::second(v0, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn pre_processing_0(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::first_pre(v0).await
    }
    async fn pre_processing_1(
        v0: &app::Spy,
    ) -> pavex::middleware::Processing<pavex::response::Response> {
        app::second_pre(v0).await
    }
    async fn handler(v0: &app::Spy) -> pavex::response::Response {
        let v1 = app::top_level_handler(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::first_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &app::Spy,
    ) -> pavex::response::Response {
        let v2 = app::second_post(v1, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a app::Spy,
        next: fn(&'a app::Spy) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}