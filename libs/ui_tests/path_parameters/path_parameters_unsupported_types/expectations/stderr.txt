[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::tuple` is trying to extract `PathParams<(u32, u32)>`, but
  [31mâ”‚[0m `(u32, u32)` is a tuple, not a plain struct type. I don't support this:
  [31mâ”‚[0m the extraction would fail at runtime, when trying to process an incoming
  [31mâ”‚[0m request.
  [31mâ”‚[0m
  [31mâ”‚[0m    â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:5:1]
  [31mâ”‚[0m  [2m5[0m â”‚
  [31mâ”‚[0m  [2m6[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/b/{x}/{y}")]
  [31mâ”‚[0m  [2m7[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn tuple(_params: PathParams<(u32, u32)>) -> StatusCode {
  [31mâ”‚[0m    Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<(u32, u32)>`[0m
  [31mâ”‚[0m  [2m8[0m â”‚         todo!()
  [31mâ”‚[0m    â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::primitive` is trying to extract `PathParams<u32>`, but
  [31mâ”‚[0m `u32` is a primitive, not a plain struct type. I don't support this:
  [31mâ”‚[0m the extraction would fail at runtime, when trying to process an incoming
  [31mâ”‚[0m request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:10:1]
  [31mâ”‚[0m  [2m10[0m â”‚
  [31mâ”‚[0m  [2m11[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/a/{x}")]
  [31mâ”‚[0m  [2m12[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn primitive(_params: PathParams<u32>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<u32>`[0m
  [31mâ”‚[0m  [2m13[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::slice_ref` is trying to extract `PathParams<&[u32]>`, but
  [31mâ”‚[0m `&[u32]` is a reference, not a plain struct type. I don't support this:
  [31mâ”‚[0m the extraction would fail at runtime, when trying to process an incoming
  [31mâ”‚[0m request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:15:1]
  [31mâ”‚[0m  [2m15[0m â”‚
  [31mâ”‚[0m  [2m16[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/c/{x}/{z}")]
  [31mâ”‚[0m  [2m17[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn slice_ref(_params: PathParams<&[u32]>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<&[u32]>`[0m
  [31mâ”‚[0m  [2m18[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::reference` is trying to extract
  [31mâ”‚[0m `PathParams<&app::MyStruct>`, but `&app::MyStruct` is a
  [31mâ”‚[0m reference, not a plain struct type. I don't support this: the extraction
  [31mâ”‚[0m would fail at runtime, when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:26:1]
  [31mâ”‚[0m  [2m26[0m â”‚
  [31mâ”‚[0m  [2m27[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/d/{x}/{y}")]
  [31mâ”‚[0m  [2m28[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn reference(_params: PathParams<&MyStruct>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<&app::MyStruct>`[0m
  [31mâ”‚[0m  [2m29[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::enum_` is trying to extract
  [31mâ”‚[0m `PathParams<app::MyEnum>`, but `app::MyEnum` is an enum,
  [31mâ”‚[0m not a plain struct type. I don't support this: the extraction would fail
  [31mâ”‚[0m at runtime, when trying to process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:38:1]
  [31mâ”‚[0m  [2m38[0m â”‚
  [31mâ”‚[0m  [2m39[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/e/{x}/{y}")]
  [31mâ”‚[0m  [2m40[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn enum_(_params: PathParams<MyEnum>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<app::MyEnum>`[0m
  [31mâ”‚[0m  [2m41[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::unit_struct` is trying to extract
  [31mâ”‚[0m `PathParams<app::UnitStruct>`, but `app::UnitStruct` is
  [31mâ”‚[0m a struct with no fields (a.k.a. unit struct), not a plain struct type. I
  [31mâ”‚[0m don't support this: the extraction would fail at runtime, when trying to
  [31mâ”‚[0m process an incoming request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:46:1]
  [31mâ”‚[0m  [2m46[0m â”‚
  [31mâ”‚[0m  [2m47[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/g/{x}/{y}")]
  [31mâ”‚[0m  [2m48[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn unit_struct(_params: PathParams<UnitStruct>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<app::UnitStruct>`[0m
  [31mâ”‚[0m  [2m49[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!
[31;1mERROR[0m:
  [31mÃ—[0m Path parameters must be extracted using a plain struct with named fields,
  [31mâ”‚[0m where the name of each field matches one of the path parameters specified
  [31mâ”‚[0m in the route for the respective request handler.
  [31mâ”‚[0m `app::tuple_struct` is trying to extract
  [31mâ”‚[0m `PathParams<app::TupleStruct>`, but `app::TupleStruct`
  [31mâ”‚[0m is a tuple struct, not a plain struct type. I don't support this: the
  [31mâ”‚[0m extraction would fail at runtime, when trying to process an incoming
  [31mâ”‚[0m request.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mpath_parameters/path_parameters_unsupported_types/src/lib.rs[0m:54:1]
  [31mâ”‚[0m  [2m54[0m â”‚
  [31mâ”‚[0m  [2m55[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/f/{x}/{y}")]
  [31mâ”‚[0m  [2m56[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn tuple_struct(_params: PathParams<TupleStruct>) -> StatusCode {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler asking for `PathParams<app::TupleStruct>`[0m
  [31mâ”‚[0m  [2m57[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Use a plain struct with named fields to extract path parameters.
  [31mâ”‚[0m         Check out `PathParams`' documentation for all the details!