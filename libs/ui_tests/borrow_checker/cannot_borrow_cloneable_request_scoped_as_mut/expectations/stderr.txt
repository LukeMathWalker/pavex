[31;1mERROR[0m:
  [31mÃ—[0m You can't inject `&mut app::A` as an input parameter to
  [31mâ”‚[0m `app::handler`, since `&mut app::A` has been marked
  [31mâ”‚[0m `CloneIfNecessary`.
  [31mâ”‚[0m Reasoning about mutations becomes impossible if Pavex can't guarantee that
  [31mâ”‚[0m all mutations will affect *the same* instance of `app::A`.
  [31mâ”‚[0m
  [31mâ”‚[0m     â•­â”€[[36;1;4mborrow_checker/cannot_borrow_cloneable_request_scoped_as_mut/src/lib.rs[0m:11:1]
  [31mâ”‚[0m  [2m11[0m â”‚
  [31mâ”‚[0m  [2m12[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/")]
  [31mâ”‚[0m  [2m13[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn handler(_a: &mut A) -> Response {
  [31mâ”‚[0m     Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe request handler was registered here[0m
  [31mâ”‚[0m  [2m14[0m â”‚         todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m     â•­â”€[[36;1;4mborrow_checker/cannot_borrow_cloneable_request_scoped_as_mut/src/lib.rs[0m:12:1]
  [31mâ”‚[0m  [2m12[0m â”‚ #[pavex::get(path = "/")]
  [31mâ”‚[0m  [2m13[0m â”‚ pub fn handler(_a: &mut A) -> Response {
  [31mâ”‚[0m     Â· [35;1m               â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€[0m
  [31mâ”‚[0m     Â·                     [35;1mâ•°â”€â”€ The &mut reference[0m
  [31mâ”‚[0m  [2m14[0m â”‚     todo!()
  [31mâ”‚[0m     â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Change `app::A`'s cloning strategy to `NeverClone`.