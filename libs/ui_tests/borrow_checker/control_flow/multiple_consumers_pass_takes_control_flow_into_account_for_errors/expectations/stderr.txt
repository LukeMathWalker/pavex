[31;1mERROR[0m:
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are 2 components that take `app::B` as an input parameter,
  [31mâ”‚[0m consuming it by value:
  [31mâ”‚[0m - `app::handler`, a request handler
  [31mâ”‚[0m - `app::c`, a constructor
  [31mâ”‚[0m Since I'm not allowed to clone `app::B`, I can't resolve this
  [31mâ”‚[0m conflict.
  [31mâ”‚[0m
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::B` in order to satisfy the borrow
  [31mâ”‚[0m         checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningPolicy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:44:1]
  [31mâ”‚[0m        [2m44[0m â”‚
  [31mâ”‚[0m        [2m45[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped(id = "B_")]
  [31mâ”‚[0m        [2m46[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn b() -> B {
  [31mâ”‚[0m           Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mThe constructor was registered here[0m
  [31mâ”‚[0m        [2m47[0m â”‚         todo!()
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of the components that consume
  [31mâ”‚[0m         `app::B` by value.
  [31mâ”‚[0m         Would a shared reference, `&app::B`, be enough?
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:54:1]
  [31mâ”‚[0m        [2m54[0m â”‚
  [31mâ”‚[0m        [2m55[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::get(path = "/home")]
  [31mâ”‚[0m        [2m56[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn handler(_b: B, _c: C) -> Response {
  [31mâ”‚[0m           Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mOne of the consuming request handlers[0m
  [31mâ”‚[0m        [2m57[0m â”‚         todo!()
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:49:1]
  [31mâ”‚[0m        [2m49[0m â”‚
  [31mâ”‚[0m        [2m50[0m â”‚ [35;1mâ•­[0m[35;1mâ”€[0m[35;1mâ–¶[0m #[pavex::request_scoped(id = "C_")]
  [31mâ”‚[0m        [2m51[0m â”‚ [35;1mâ”œ[0m[35;1mâ”€[0m[35;1mâ–¶[0m pub fn c(_a: A, _b: B) -> C {
  [31mâ”‚[0m           Â· [35;1mâ•°[0m[35;1mâ”€â”€â”€[0m[35;1mâ”€[0m [35;1mOne of the consuming constructors[0m
  [31mâ”‚[0m        [2m52[0m â”‚         todo!()
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m If `app::B` itself cannot implement `Clone`, consider
  [31mâ”‚[0m         wrapping it in an `std::sync::Rc` or `std::sync::Arc`.
