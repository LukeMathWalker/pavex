[31m[1mERROR[0m[39m: 
  [31mÃ—[0m I can't generate code that will pass the borrow checker *and* match the
  [31mâ”‚[0m instructions in your blueprint.
  [31mâ”‚[0m There are 2 components that take `app::B` as an input parameter,
  [31mâ”‚[0m consuming it by value:
  [31mâ”‚[0m - `app::handler`, a request handler
  [31mâ”‚[0m - `app::c`, a constructor
  [31mâ”‚[0m Since I'm not allowed to clone `app::B`, I can't resolve this
  [31mâ”‚[0m conflict.
  [31mâ”‚[0m 
  [31mâ”‚[0m
  [31mâ”‚[0m   [36mhelp:[0m Allow me to clone `app::B` in order to satisfy the borrow
  [31mâ”‚[0m         checker.
  [31mâ”‚[0m         You can do so by invoking `.cloning(CloningStrategy::CloneIfNecessary)`
  [31mâ”‚[0m         on the type returned by `.constructor`.
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:59:1]
  [31mâ”‚[0m        [2m59[0m â”‚         .error_handler(f!(crate::error_handler));
  [31mâ”‚[0m        [2m60[0m â”‚     bp.request_scoped(f!(crate::b));
  [31mâ”‚[0m           Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                             [35;1mâ•°â”€â”€ The constructor was registered here[0m
  [31mâ”‚[0m        [2m61[0m â”‚     bp.request_scoped(f!(crate::c));
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m Considering changing the signature of the components that consume
  [31mâ”‚[0m         `app::B` by value.
  [31mâ”‚[0m         Would a shared reference, `&app::B`, be enough?
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:61:1]
  [31mâ”‚[0m        [2m61[0m â”‚     bp.request_scoped(f!(crate::c));
  [31mâ”‚[0m        [2m62[0m â”‚     bp.route(GET, "/home", f!(crate::handler));
  [31mâ”‚[0m           Â· [35;1m                           â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                   [35;1mOne of the consuming request handlers[0m
  [31mâ”‚[0m        [2m63[0m â”‚     bp
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m        â˜ž
  [31mâ”‚[0m           â•­â”€[[36;1;4mborrow_checker/control_flow/multiple_consumers_pass_takes_control_flow_into_account_for_errors/src/lib.rs[0m:60:1]
  [31mâ”‚[0m        [2m60[0m â”‚     bp.request_scoped(f!(crate::b));
  [31mâ”‚[0m        [2m61[0m â”‚     bp.request_scoped(f!(crate::c));
  [31mâ”‚[0m           Â· [35;1m                      â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€[0m
  [31mâ”‚[0m           Â·                             [35;1mâ•°â”€â”€ One of the consuming constructors[0m
  [31mâ”‚[0m        [2m62[0m â”‚     bp.route(GET, "/home", f!(crate::handler));
  [31mâ”‚[0m           â•°â”€â”€â”€â”€
  [31mâ”‚[0m   [36mhelp:[0m If `app::B` itself cannot implement `Clone`, consider
  [31mâ”‚[0m         wrapping it in an `std::sync::Rc` or `std::sync::Arc`.