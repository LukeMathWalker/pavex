//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {}
pub struct ApplicationState {
    pub actual_type: dep_f8f62968::ActualType,
    pub bool__char__u8_: (bool, char, u8),
    pub generic_type_bool__bool_: dep_f8f62968::GenericType<bool, bool>,
    pub generic_type_bool__u8_: dep_f8f62968::GenericType<bool, u8>,
    pub generic_type_u8__u8_: dep_f8f62968::GenericType<u8, u8>,
    pub string: alloc::string::String,
}
impl ApplicationState {
    pub async fn new(
        _app_config: crate::ApplicationConfig,
        v0: alloc::string::String,
        v1: dep_f8f62968::GenericType<bool, u8>,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(v0, v1).await)
    }
    async fn _new(
        v0: alloc::string::String,
        v1: dep_f8f62968::GenericType<bool, u8>,
    ) -> crate::ApplicationState {
        let v2 = dep_f8f62968::GenericType::new();
        let v3 = dep_f8f62968::GenericType::new();
        let v4 = app::constructor_with_output_tuple();
        let v5 = dep_f8f62968::ActualType::new();
        crate::ApplicationState {
            actual_type: v5,
            bool__char__u8_: v4,
            generic_type_bool__bool_: v3,
            generic_type_bool__u8_: v1,
            generic_type_u8__u8_: v2,
            string: v0,
        }
    }
}
#[deprecated(note = "Use `ApplicationState::new` instead.")]
pub async fn build_application_state(
    _app_config: crate::ApplicationConfig,
    v0: alloc::string::String,
    v1: dep_f8f62968::GenericType<bool, u8>,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    crate::ApplicationState::new(_app_config, v0, v1).await
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/home", 0u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            return route_0::entrypoint(&allowed_methods).await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        route_1::entrypoint(
                                state.bool__char__u8_.clone(),
                                &state.string,
                                &state.actual_type,
                                &state.generic_type_bool__bool_,
                                &state.generic_type_u8__u8_,
                                &state.generic_type_bool__u8_,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_0::entrypoint(&allowed_methods).await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = crate::route_0::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: (bool, char, u8),
        s_1: &'a alloc::string::String,
        s_2: &'b dep_f8f62968::ActualType,
        s_3: &'c dep_f8f62968::GenericType<bool, bool>,
        s_4: &'d dep_f8f62968::GenericType<u8, u8>,
        s_5: &'e dep_f8f62968::GenericType<bool, u8>,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a alloc::string::String,
        s_1: &'b dep_f8f62968::ActualType,
        s_2: (bool, char, u8),
        s_3: &'c dep_f8f62968::GenericType<bool, bool>,
        s_4: &'d dep_f8f62968::GenericType<u8, u8>,
        s_5: &'e dep_f8f62968::GenericType<bool, u8>,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn wrapping_0(
        v0: (bool, char, u8),
        v1: &alloc::string::String,
        v2: &dep_f8f62968::ActualType,
        v3: &dep_f8f62968::GenericType<bool, bool>,
        v4: &dep_f8f62968::GenericType<u8, u8>,
        v5: &dep_f8f62968::GenericType<bool, u8>,
    ) -> pavex::response::Response {
        let v6 = crate::route_1::Next0 {
            s_0: v1,
            s_1: v2,
            s_2: v0,
            s_3: v3,
            s_4: v4,
            s_5: v5,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: &alloc::string::String,
        v1: &dep_f8f62968::ActualType,
        v2: (bool, char, u8),
        v3: &dep_f8f62968::GenericType<bool, bool>,
        v4: &dep_f8f62968::GenericType<u8, u8>,
        v5: &dep_f8f62968::GenericType<bool, u8>,
    ) -> pavex::response::Response {
        let v6 = app::mixed_generics(v0);
        let v7 = dep_f8f62968::DoubleLifetimeType::new(v1, v0);
        let v8 = app::handler_with_input_tuple(v2, v1, v3, &v7, v6, v4, v5);
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a alloc::string::String,
        s_1: &'b dep_f8f62968::ActualType,
        s_2: (bool, char, u8),
        s_3: &'c dep_f8f62968::GenericType<bool, bool>,
        s_4: &'d dep_f8f62968::GenericType<u8, u8>,
        s_5: &'e dep_f8f62968::GenericType<bool, u8>,
        next: fn(
            &'a alloc::string::String,
            &'b dep_f8f62968::ActualType,
            (bool, char, u8),
            &'c dep_f8f62968::GenericType<bool, bool>,
            &'d dep_f8f62968::GenericType<u8, u8>,
            &'e dep_f8f62968::GenericType<bool, u8>,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
}