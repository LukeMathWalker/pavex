//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    pub actual_type: dep_f8f62968::ActualType,
    pub bool__char__u8_: (bool, char, u8),
    pub generic_type: dep_f8f62968::GenericType<bool, bool>,
    pub string: alloc::string::String,
}
pub async fn build_application_state(
    v0: alloc::string::String,
) -> crate::ApplicationState {
    let v1 = dep_f8f62968::GenericType::<
        std::primitive::bool,
        std::primitive::bool,
    >::new();
    let v2 = app::constructor_with_output_tuple();
    let v3 = dep_f8f62968::ActualType::new();
    crate::ApplicationState {
        actual_type: v3,
        bool__char__u8_: v2,
        generic_type: v1,
        string: v0,
    }
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/home", 0u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            return route_1::entrypoint(&allowed_methods).await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        route_0::entrypoint(
                                state.bool__char__u8_.clone(),
                                &state.string,
                                &state.actual_type,
                                &state.generic_type,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        route_1::entrypoint(&allowed_methods).await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: (bool, char, u8),
        s_1: &'a alloc::string::String,
        s_2: &'b dep_f8f62968::ActualType,
        s_3: &'c dep_f8f62968::GenericType<bool, bool>,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: (bool, char, u8),
        s_1: &'a dep_f8f62968::GenericType<bool, bool>,
        s_2: &'b alloc::string::String,
        s_3: &'c dep_f8f62968::ActualType,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn wrapping_0(
        v0: (bool, char, u8),
        v1: &alloc::string::String,
        v2: &dep_f8f62968::ActualType,
        v3: &dep_f8f62968::GenericType<bool, bool>,
    ) -> pavex::response::Response {
        let v4 = crate::route_0::Next0 {
            s_0: v0,
            s_1: v3,
            s_2: v1,
            s_3: v2,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn handler(
        v0: (bool, char, u8),
        v1: &dep_f8f62968::GenericType<bool, bool>,
        v2: &alloc::string::String,
        v3: &dep_f8f62968::ActualType,
    ) -> pavex::response::Response {
        let v4 = app::mixed_generics(v2);
        let v5 = dep_f8f62968::DoubleLifetimeType::<'_, '_>::new(v3, v2);
        let v6 = app::handler_with_input_tuple(v0, v3, v1, &v5, v4);
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: (bool, char, u8),
        s_1: &'a dep_f8f62968::GenericType<bool, bool>,
        s_2: &'b alloc::string::String,
        s_3: &'c dep_f8f62968::ActualType,
        next: fn(
            (bool, char, u8),
            &'a dep_f8f62968::GenericType<bool, bool>,
            &'b alloc::string::String,
            &'c dep_f8f62968::ActualType,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0).await;
        response
    }
    async fn stage_1<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v1 = crate::route_1::Next0 {
            s_0: v0,
            next: stage_1,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = pavex::middleware::wrap_noop(v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}